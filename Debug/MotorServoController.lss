
MotorServoController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028c  00800060  00001490  00001524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  008002ec  008002ec  000017b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008e0  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008c8f  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064c  00000000  00000000  0000ad8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001808  00000000  00000000  0000b3d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012bc  00000000  00000000  0000cbe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000c102  00000000  00000000  0000de9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000173e  00000000  00000000  00019f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e8  00000000  00000000  0001b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000004ba  00000000  00000000  0001bfc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
       4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
       c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_19>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	f9 02       	muls	r31, r25

00000056 <__ctors_end>:
      56:	8d 03       	fmulsu	r16, r21

00000058 <__dtors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf e5       	ldi	r28, 0x5F	; 95
      5e:	d4 e0       	ldi	r29, 0x04	; 4
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	12 e0       	ldi	r17, 0x02	; 2
      66:	a0 e6       	ldi	r26, 0x60	; 96
      68:	b0 e0       	ldi	r27, 0x00	; 0
      6a:	e0 e9       	ldi	r30, 0x90	; 144
      6c:	f4 e1       	ldi	r31, 0x14	; 20
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	ac 3e       	cpi	r26, 0xEC	; 236
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	23 e0       	ldi	r18, 0x03	; 3
      7c:	ac ee       	ldi	r26, 0xEC	; 236
      7e:	b2 e0       	ldi	r27, 0x02	; 2
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	a8 35       	cpi	r26, 0x58	; 88
      86:	b2 07       	cpc	r27, r18
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
      8a:	10 e0       	ldi	r17, 0x00	; 0
      8c:	cb e2       	ldi	r28, 0x2B	; 43
      8e:	d0 e0       	ldi	r29, 0x00	; 0
      90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
      92:	21 97       	sbiw	r28, 0x01	; 1
      94:	fe 01       	movw	r30, r28
      96:	0e 94 08 09 	call	0x1210	; 0x1210 <__tablejump2__>
      9a:	ca 32       	cpi	r28, 0x2A	; 42
      9c:	d1 07       	cpc	r29, r17
      9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
      a0:	0e 94 77 02 	call	0x4ee	; 0x4ee <main>
      a4:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__do_global_dtors>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_Znwj>:
*/
#ifndef __CPPHELPERS_H__
#define __CPPHELPERS_H__
void * operator new(size_t size)
{
	return malloc(size);
      ac:	0e 94 0e 09 	call	0x121c	; 0x121c <malloc>
}
      b0:	08 95       	ret

000000b2 <_ZdlPv>:

void operator delete(void * ptr)
{
	free(ptr);
      b2:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
      b6:	08 95       	ret

000000b8 <__vector_19>:
		#include "MainAsyncTaskManager.cpp"
	#endif
	static TaskManager Taskmanager;

	ISR(TIMER0_COMP_vect)
	{
      b8:	1f 92       	push	r1
      ba:	0f 92       	push	r0
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	0f 92       	push	r0
      c0:	11 24       	eor	r1, r1
      c2:	2f 93       	push	r18
      c4:	3f 93       	push	r19
      c6:	4f 93       	push	r20
      c8:	5f 93       	push	r21
      ca:	6f 93       	push	r22
      cc:	7f 93       	push	r23
      ce:	8f 93       	push	r24
      d0:	9f 93       	push	r25
      d2:	af 93       	push	r26
      d4:	bf 93       	push	r27
      d6:	ef 93       	push	r30
      d8:	ff 93       	push	r31
	}
}

void Invoke()
{
	if (tasks[currentTaskNumber] != nullptr)
      da:	e0 91 53 03 	lds	r30, 0x0353
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	ee 0f       	add	r30, r30
      e2:	ff 1f       	adc	r31, r31
      e4:	ed 5b       	subi	r30, 0xBD	; 189
      e6:	fc 4f       	sbci	r31, 0xFC	; 252
      e8:	80 81       	ld	r24, Z
      ea:	91 81       	ldd	r25, Z+1	; 0x01
      ec:	00 97       	sbiw	r24, 0x00	; 0
      ee:	31 f0       	breq	.+12     	; 0xfc <__vector_19+0x44>
	{
		tasks[currentTaskNumber]->currentMethod(tasks[currentTaskNumber]);
      f0:	dc 01       	movw	r26, r24
      f2:	12 96       	adiw	r26, 0x02	; 2
      f4:	ed 91       	ld	r30, X+
      f6:	fc 91       	ld	r31, X
      f8:	13 97       	sbiw	r26, 0x03	; 3
      fa:	09 95       	icall
	tasks[task->AlocateNumber] = nullptr;
}

void GetNext()
{
	++currentTaskNumber;
      fc:	80 91 53 03 	lds	r24, 0x0353
     100:	8f 5f       	subi	r24, 0xFF	; 255
	if (currentTaskNumber >= NumberOfTasks)
     102:	88 30       	cpi	r24, 0x08	; 8
     104:	18 f4       	brcc	.+6      	; 0x10c <__vector_19+0x54>
	tasks[task->AlocateNumber] = nullptr;
}

void GetNext()
{
	++currentTaskNumber;
     106:	80 93 53 03 	sts	0x0353, r24
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__vector_19+0x58>
	if (currentTaskNumber >= NumberOfTasks)
	{
		currentTaskNumber = 0;
     10c:	10 92 53 03 	sts	0x0353, r1
		Taskmanager.Invoke();
	}
     110:	ff 91       	pop	r31
     112:	ef 91       	pop	r30
     114:	bf 91       	pop	r27
     116:	af 91       	pop	r26
     118:	9f 91       	pop	r25
     11a:	8f 91       	pop	r24
     11c:	7f 91       	pop	r23
     11e:	6f 91       	pop	r22
     120:	5f 91       	pop	r21
     122:	4f 91       	pop	r20
     124:	3f 91       	pop	r19
     126:	2f 91       	pop	r18
     128:	0f 90       	pop	r0
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	0f 90       	pop	r0
     12e:	1f 90       	pop	r1
     130:	18 95       	reti

00000132 <_Z18NextCalibrateStagev>:
#include "TaskManager/TaskManager.hpp"
#include "Variables.h"

void NextCalibrateStage()
{
	switch (calibrateStage)
     132:	80 91 ec 02 	lds	r24, 0x02EC
     136:	90 91 ed 02 	lds	r25, 0x02ED
     13a:	81 30       	cpi	r24, 0x01	; 1
     13c:	91 05       	cpc	r25, r1
     13e:	b9 f0       	breq	.+46     	; 0x16e <_Z18NextCalibrateStagev+0x3c>
     140:	1c f4       	brge	.+6      	; 0x148 <_Z18NextCalibrateStagev+0x16>
     142:	89 2b       	or	r24, r25
     144:	39 f0       	breq	.+14     	; 0x154 <_Z18NextCalibrateStagev+0x22>
     146:	08 95       	ret
     148:	82 30       	cpi	r24, 0x02	; 2
     14a:	91 05       	cpc	r25, r1
     14c:	f1 f0       	breq	.+60     	; 0x18a <_Z18NextCalibrateStagev+0x58>
     14e:	03 97       	sbiw	r24, 0x03	; 3
     150:	69 f1       	breq	.+90     	; 0x1ac <_Z18NextCalibrateStagev+0x7a>
     152:	08 95       	ret
	{
		case CalibrateStage::No:
			calibrateStage = CalibrateStage::Left;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	90 93 ed 02 	sts	0x02ED, r25
     15c:	80 93 ec 02 	sts	0x02EC, r24
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     160:	ae 98       	cbi	0x15, 6	; 21
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     162:	af 9a       	sbi	0x15, 7	; 21

			GreenLed.Clear();
			RedLed.Set();
			
			ICR1 = 0b1111111111;
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	93 e0       	ldi	r25, 0x03	; 3
     168:	97 bd       	out	0x27, r25	; 39
     16a:	86 bd       	out	0x26, r24	; 38
		break;
     16c:	08 95       	ret
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     16e:	af 98       	cbi	0x15, 7	; 21
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     170:	ae 9a       	sbi	0x15, 6	; 21
		CalculatedPosition = (uint16_t)(((Spin<<8) |(AngleValue)) - (ErrorValue));
	}

	void SetZeroPosition()
	{
		Spin = 0;
     172:	ea ef       	ldi	r30, 0xFA	; 250
     174:	f2 e0       	ldi	r31, 0x02	; 2
     176:	14 82       	std	Z+4, r1	; 0x04
		ErrorValue = AngleValue;
     178:	82 81       	ldd	r24, Z+2	; 0x02
     17a:	85 83       	std	Z+5, r24	; 0x05
			
			RedLed.Clear();
			GreenLed.Set();
			
			AS5048AChip.SetZeroPosition();
			calibrateStage = CalibrateStage::Right;
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	90 93 ed 02 	sts	0x02ED, r25
     184:	80 93 ec 02 	sts	0x02EC, r24
		break;
     188:	08 95       	ret
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     18a:	af 98       	cbi	0x15, 7	; 21
     18c:	ae 98       	cbi	0x15, 6	; 21

		case CalibrateStage::Right:
						RedLed.Clear();
						GreenLed.Clear();
			calibrateStage = CalibrateStage::Calibrated;
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	90 93 ed 02 	sts	0x02ED, r25
     196:	80 93 ec 02 	sts	0x02EC, r24
			RotateLimit = (AS5048AChip.CalculatedPosition);
     19a:	80 91 fa 02 	lds	r24, 0x02FA
     19e:	90 91 fb 02 	lds	r25, 0x02FB
     1a2:	90 93 3c 03 	sts	0x033C, r25
     1a6:	80 93 3b 03 	sts	0x033B, r24
		break;
     1aa:	08 95       	ret
		case CalibrateStage::Calibrated:
			calibrateStage = CalibrateStage::No;
     1ac:	10 92 ed 02 	sts	0x02ED, r1
     1b0:	10 92 ec 02 	sts	0x02EC, r1
     1b4:	08 95       	ret

000001b6 <_Z15KeyboardHandlerP4Task>:
	Timer0::SetPrescaler(Timer0::Prescalers::Prescaler_256);
	sei();
}

void KeyboardHandler(Task * task)
{
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
		_RegisterPL->Clear();
	}

	uint8_t ReadData()
	{
		_RegisterPL->Set();
     1be:	c2 ef       	ldi	r28, 0xF2	; 242
     1c0:	d2 e0       	ldi	r29, 0x02	; 2
     1c2:	8a 81       	ldd	r24, Y+2	; 0x02
     1c4:	9b 81       	ldd	r25, Y+3	; 0x03
     1c6:	dc 01       	movw	r26, r24
     1c8:	ed 91       	ld	r30, X+
     1ca:	fc 91       	ld	r31, X
     1cc:	06 84       	ldd	r0, Z+14	; 0x0e
     1ce:	f7 85       	ldd	r31, Z+15	; 0x0f
     1d0:	e0 2d       	mov	r30, r0
     1d2:	09 95       	icall
		_RegisterPL->Clear();
     1d4:	8a 81       	ldd	r24, Y+2	; 0x02
     1d6:	9b 81       	ldd	r25, Y+3	; 0x03
     1d8:	dc 01       	movw	r26, r24
     1da:	ed 91       	ld	r30, X+
     1dc:	fc 91       	ld	r31, X
     1de:	00 88       	ldd	r0, Z+16	; 0x10
     1e0:	f1 89       	ldd	r31, Z+17	; 0x11
     1e2:	e0 2d       	mov	r30, r0
     1e4:	09 95       	icall
		lastData = 1;
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	9f 83       	std	Y+7, r25	; 0x07
     1ec:	8e 83       	std	Y+6, r24	; 0x06
     1ee:	07 e1       	ldi	r16, 0x17	; 23
     1f0:	10 e0       	ldi	r17, 0x00	; 0
		for (int i = 22;i >=0;i--)
		{
			_RegisterClk->Clear();
     1f2:	88 81       	ld	r24, Y
     1f4:	99 81       	ldd	r25, Y+1	; 0x01
     1f6:	dc 01       	movw	r26, r24
     1f8:	ed 91       	ld	r30, X+
     1fa:	fc 91       	ld	r31, X
     1fc:	00 88       	ldd	r0, Z+16	; 0x10
     1fe:	f1 89       	ldd	r31, Z+17	; 0x11
     200:	e0 2d       	mov	r30, r0
     202:	09 95       	icall
			lastData <<= 1;
     204:	8e 81       	ldd	r24, Y+6	; 0x06
     206:	9f 81       	ldd	r25, Y+7	; 0x07
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	9f 83       	std	Y+7, r25	; 0x07
     20e:	8e 83       	std	Y+6, r24	; 0x06
			if (!_RegisterQ7->Check())
     210:	8c 81       	ldd	r24, Y+4	; 0x04
     212:	9d 81       	ldd	r25, Y+5	; 0x05
     214:	dc 01       	movw	r26, r24
     216:	ed 91       	ld	r30, X+
     218:	fc 91       	ld	r31, X
     21a:	04 84       	ldd	r0, Z+12	; 0x0c
     21c:	f5 85       	ldd	r31, Z+13	; 0x0d
     21e:	e0 2d       	mov	r30, r0
     220:	09 95       	icall
     222:	81 11       	cpse	r24, r1
     224:	05 c0       	rjmp	.+10     	; 0x230 <_Z15KeyboardHandlerP4Task+0x7a>
			{
				lastData++;
     226:	8e 81       	ldd	r24, Y+6	; 0x06
     228:	9f 81       	ldd	r25, Y+7	; 0x07
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	9f 83       	std	Y+7, r25	; 0x07
     22e:	8e 83       	std	Y+6, r24	; 0x06
			}
			_RegisterClk->Set();
     230:	88 81       	ld	r24, Y
     232:	99 81       	ldd	r25, Y+1	; 0x01
     234:	dc 01       	movw	r26, r24
     236:	ed 91       	ld	r30, X+
     238:	fc 91       	ld	r31, X
     23a:	06 84       	ldd	r0, Z+14	; 0x0e
     23c:	f7 85       	ldd	r31, Z+15	; 0x0f
     23e:	e0 2d       	mov	r30, r0
     240:	09 95       	icall
     242:	01 50       	subi	r16, 0x01	; 1
     244:	11 09       	sbc	r17, r1
	uint8_t ReadData()
	{
		_RegisterPL->Set();
		_RegisterPL->Clear();
		lastData = 1;
		for (int i = 22;i >=0;i--)
     246:	a9 f6       	brne	.-86     	; 0x1f2 <_Z15KeyboardHandlerP4Task+0x3c>
			{
				lastData++;
			}
			_RegisterClk->Set();
		}
		return lastData;
     248:	e2 ef       	ldi	r30, 0xF2	; 242
     24a:	f2 e0       	ldi	r31, 0x02	; 2
     24c:	86 81       	ldd	r24, Z+6	; 0x06
     24e:	97 81       	ldd	r25, Z+7	; 0x07
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     250:	85 b3       	in	r24, 0x15	; 21
     252:	8f 63       	ori	r24, 0x3F	; 63
     254:	85 bb       	out	0x15, r24	; 21
	MjoyButton1.FastSet();
	MjoyButton2.FastSet();
	MjoyButton3.FastSet();
	MjoyButton4.FastSet();
	MjoyButton5.FastSet();
	if ((wheelButtons.lastData) & (1<<8)) {calibrateStage = CalibrateStage::Left; NextCalibrateStage();}
     256:	86 81       	ldd	r24, Z+6	; 0x06
     258:	97 81       	ldd	r25, Z+7	; 0x07
     25a:	90 ff       	sbrs	r25, 0
     25c:	08 c0       	rjmp	.+16     	; 0x26e <_Z15KeyboardHandlerP4Task+0xb8>
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 ed 02 	sts	0x02ED, r25
     266:	80 93 ec 02 	sts	0x02EC, r24
     26a:	0e 94 99 00 	call	0x132	; 0x132 <_Z18NextCalibrateStagev>
	if ((wheelButtons.lastData) & (1<<7)) {calibrateStage = CalibrateStage::Right; NextCalibrateStage();}
     26e:	80 91 f8 02 	lds	r24, 0x02F8
     272:	90 91 f9 02 	lds	r25, 0x02F9
     276:	87 ff       	sbrs	r24, 7
     278:	08 c0       	rjmp	.+16     	; 0x28a <_Z15KeyboardHandlerP4Task+0xd4>
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	90 93 ed 02 	sts	0x02ED, r25
     282:	80 93 ec 02 	sts	0x02EC, r24
     286:	0e 94 99 00 	call	0x132	; 0x132 <_Z18NextCalibrateStagev>
	if ((wheelButtons.lastData) & 0b10000000000) {MjoyButton0.Clear();}
     28a:	80 91 f8 02 	lds	r24, 0x02F8
     28e:	90 91 f9 02 	lds	r25, 0x02F9
     292:	92 fd       	sbrc	r25, 2
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     294:	a8 98       	cbi	0x15, 0	; 21
	if ((wheelButtons.lastData) & (1<<15)) {MjoyButton1.Clear();}
     296:	80 91 f8 02 	lds	r24, 0x02F8
     29a:	90 91 f9 02 	lds	r25, 0x02F9
     29e:	99 23       	and	r25, r25
     2a0:	0c f4       	brge	.+2      	; 0x2a4 <_Z15KeyboardHandlerP4Task+0xee>
     2a2:	a9 98       	cbi	0x15, 1	; 21
	if ((wheelButtons.lastData) & (1<<14)) {MjoyButton2.Clear();}
     2a4:	80 91 f8 02 	lds	r24, 0x02F8
     2a8:	90 91 f9 02 	lds	r25, 0x02F9
     2ac:	96 fd       	sbrc	r25, 6
     2ae:	aa 98       	cbi	0x15, 2	; 21
	if ((wheelButtons.lastData) & (1<<13)) {MjoyButton3.Clear();}
     2b0:	80 91 f8 02 	lds	r24, 0x02F8
     2b4:	90 91 f9 02 	lds	r25, 0x02F9
     2b8:	95 fd       	sbrc	r25, 5
     2ba:	ab 98       	cbi	0x15, 3	; 21
	if ((wheelButtons.lastData) & (1<<9)) {MjoyButton4.Clear();}
     2bc:	80 91 f8 02 	lds	r24, 0x02F8
     2c0:	90 91 f9 02 	lds	r25, 0x02F9
     2c4:	91 fd       	sbrc	r25, 1
     2c6:	ac 98       	cbi	0x15, 4	; 21
	if ((wheelButtons.lastData) & (1<<5)) {MjoyButton5.Clear();}
     2c8:	80 91 f8 02 	lds	r24, 0x02F8
     2cc:	90 91 f9 02 	lds	r25, 0x02F9
     2d0:	85 fd       	sbrc	r24, 5
     2d2:	ad 98       	cbi	0x15, 5	; 21
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	08 95       	ret

000002de <_Z13RegisterTasksv>:

void RegisterTasks()
{
	keyboardTask.currentMethod = KeyboardHandler;
     2de:	8b ed       	ldi	r24, 0xDB	; 219
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	90 93 f1 02 	sts	0x02F1, r25
     2e6:	80 93 f0 02 	sts	0x02F0, r24
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
	{
		if (tasks[firstFreeIndicator] == nullptr)
     2ea:	80 91 43 03 	lds	r24, 0x0343
     2ee:	90 91 44 03 	lds	r25, 0x0344
     2f2:	89 2b       	or	r24, r25
     2f4:	61 f0       	breq	.+24     	; 0x30e <_Z13RegisterTasksv+0x30>
     2f6:	e5 e4       	ldi	r30, 0x45	; 69
     2f8:	f3 e0       	ldi	r31, 0x03	; 3
     2fa:	43 e5       	ldi	r20, 0x53	; 83
     2fc:	53 e0       	ldi	r21, 0x03	; 3
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	bc 01       	movw	r22, r24
     304:	21 91       	ld	r18, Z+
     306:	31 91       	ld	r19, Z+
     308:	23 2b       	or	r18, r19
     30a:	79 f4       	brne	.+30     	; 0x32a <_Z13RegisterTasksv+0x4c>
     30c:	02 c0       	rjmp	.+4      	; 0x312 <_Z13RegisterTasksv+0x34>
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	70 e0       	ldi	r23, 0x00	; 0
	}
}

void UnsafeRegister(Task& task, uint8_t positionIndicator)
{
	tasks[positionIndicator] = &task;
     312:	fb 01       	movw	r30, r22
     314:	ee 0f       	add	r30, r30
     316:	ff 1f       	adc	r31, r31
     318:	ed 5b       	subi	r30, 0xBD	; 189
     31a:	fc 4f       	sbci	r31, 0xFC	; 252
     31c:	ae ee       	ldi	r26, 0xEE	; 238
     31e:	b2 e0       	ldi	r27, 0x02	; 2
     320:	b1 83       	std	Z+1, r27	; 0x01
     322:	a0 83       	st	Z, r26
	task.AlocateNumber = positionIndicator;
     324:	6d 93       	st	X+, r22
     326:	7c 93       	st	X, r23
     328:	08 95       	ret
     32a:	01 96       	adiw	r24, 0x01	; 1

void Register(Task& task)
{
	uint8_t firstFreeIndicator = 0;

	while (firstFreeIndicator < NumberOfTasks)
     32c:	e4 17       	cp	r30, r20
     32e:	f5 07       	cpc	r31, r21
     330:	41 f7       	brne	.-48     	; 0x302 <_Z13RegisterTasksv+0x24>
     332:	08 95       	ret

00000334 <_Z13PWMInitializev>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     334:	8d 9a       	sbi	0x11, 5	; 17
			FastPWM_OVR1A = 15
		};

		void static WaveFormMode(const WaveFormModes waveFormsModes)
		{
			CLEAR(TCCR1B,(1<<WGM12)|(1<<WGM13));
     336:	8e b5       	in	r24, 0x2e	; 46
     338:	87 7e       	andi	r24, 0xE7	; 231
     33a:	8e bd       	out	0x2e, r24	; 46
			CLEAR(TCCR1A,(1<<WGM10)|(1<<WGM11));
     33c:	8f b5       	in	r24, 0x2f	; 47
     33e:	8c 7f       	andi	r24, 0xFC	; 252
     340:	8f bd       	out	0x2f, r24	; 47
			switch (waveFormsModes)
			{
				case WaveFormModes::PhaseCorrect_ICR1:
				SET(TCCR1A,1<<WGM11);
     342:	8f b5       	in	r24, 0x2f	; 47
     344:	82 60       	ori	r24, 0x02	; 2
     346:	8f bd       	out	0x2f, r24	; 47
				SET(TCCR1B,1<<WGM13);
     348:	8e b5       	in	r24, 0x2e	; 46
     34a:	80 61       	ori	r24, 0x10	; 16
     34c:	8e bd       	out	0x2e, r24	; 46
		void static PWMPhaseCorrectCompareOutputMode(PWMPhaseCorrectCompareOutputModes modes)
		{
			switch (modes)
			{
				case PWMPhaseCorrectCompareOutputModes::ClearUpCountingSetDownCounting:
				SET(TCCR1A,(1<<COM1A1));
     34e:	8f b5       	in	r24, 0x2f	; 47
     350:	80 68       	ori	r24, 0x80	; 128
     352:	8f bd       	out	0x2f, r24	; 47
			Prescaler_1 = (1<<CS10),
		};
		
		void static SetPrescaler(Prescaler prescaler)
		{
			CLEAR(TCCR1B,(1<<CS10)|(1<<CS11)|(1<<CS12));
     354:	8e b5       	in	r24, 0x2e	; 46
     356:	88 7f       	andi	r24, 0xF8	; 248
     358:	8e bd       	out	0x2e, r24	; 46
			SET(TCCR1B,(uint8_t)prescaler);
     35a:	8e b5       	in	r24, 0x2e	; 46
     35c:	81 60       	ori	r24, 0x01	; 1
     35e:	8e bd       	out	0x2e, r24	; 46

	Timer1::WaveFormMode(Timer1::WaveFormModes::PhaseCorrect_ICR1);
	Timer1::PWMPhaseCorrectCompareOutputMode(Timer1::PWMPhaseCorrectCompareOutputModes::ClearUpCountingSetDownCounting);
	Timer1::SetPrescaler(Timer1::Prescaler::Prescaler_1);

	ICR1 = 0xffff;
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	9f ef       	ldi	r25, 0xFF	; 255
     364:	97 bd       	out	0x27, r25	; 39
     366:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;
     368:	1b bc       	out	0x2b, r1	; 43
     36a:	1a bc       	out	0x2a, r1	; 42
     36c:	08 95       	ret

0000036e <_Z15InitializePortsv>:
}

void InitializePorts()
{
	PORTD= PORTC = PORTB= DDRB = DDRD =  DDRC = DDRA = 0xff;
     36e:	8f ef       	ldi	r24, 0xFF	; 255
     370:	8a bb       	out	0x1a, r24	; 26
     372:	84 bb       	out	0x14, r24	; 20
     374:	81 bb       	out	0x11, r24	; 17
     376:	87 bb       	out	0x17, r24	; 23
     378:	88 bb       	out	0x18, r24	; 24
     37a:	85 bb       	out	0x15, r24	; 21
     37c:	82 bb       	out	0x12, r24	; 18
     37e:	a7 9a       	sbi	0x14, 7	; 20
     380:	a6 9a       	sbi	0x14, 6	; 20
     382:	08 95       	ret

00000384 <_Z17InitializeProgramv>:
	RedLed.AsOutput();
	GreenLed.AsOutput();
}

void InitializeProgram()
{
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
	InitializePorts();
     388:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z15InitializePortsv>
		_Clk = &Clk;
	}

	void Initalize()
	{
		_ChipSelect->AsOutput();
     38c:	ca ef       	ldi	r28, 0xFA	; 250
     38e:	d2 e0       	ldi	r29, 0x02	; 2
     390:	88 85       	ldd	r24, Y+8	; 0x08
     392:	99 85       	ldd	r25, Y+9	; 0x09
     394:	dc 01       	movw	r26, r24
     396:	ed 91       	ld	r30, X+
     398:	fc 91       	ld	r31, X
     39a:	04 88       	ldd	r0, Z+20	; 0x14
     39c:	f5 89       	ldd	r31, Z+21	; 0x15
     39e:	e0 2d       	mov	r30, r0
     3a0:	09 95       	icall
		_Miso->AsInput();
     3a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     3a4:	9d 85       	ldd	r25, Y+13	; 0x0d
     3a6:	dc 01       	movw	r26, r24
     3a8:	ed 91       	ld	r30, X+
     3aa:	fc 91       	ld	r31, X
     3ac:	06 88       	ldd	r0, Z+22	; 0x16
     3ae:	f7 89       	ldd	r31, Z+23	; 0x17
     3b0:	e0 2d       	mov	r30, r0
     3b2:	09 95       	icall
		_Mosi->AsOutput();
     3b4:	8e 81       	ldd	r24, Y+6	; 0x06
     3b6:	9f 81       	ldd	r25, Y+7	; 0x07
     3b8:	dc 01       	movw	r26, r24
     3ba:	ed 91       	ld	r30, X+
     3bc:	fc 91       	ld	r31, X
     3be:	04 88       	ldd	r0, Z+20	; 0x14
     3c0:	f5 89       	ldd	r31, Z+21	; 0x15
     3c2:	e0 2d       	mov	r30, r0
     3c4:	09 95       	icall
		_Clk->AsOutput();
     3c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     3c8:	9b 85       	ldd	r25, Y+11	; 0x0b
     3ca:	dc 01       	movw	r26, r24
     3cc:	ed 91       	ld	r30, X+
     3ce:	fc 91       	ld	r31, X
     3d0:	04 88       	ldd	r0, Z+20	; 0x14
     3d2:	f5 89       	ldd	r31, Z+21	; 0x15
     3d4:	e0 2d       	mov	r30, r0
     3d6:	09 95       	icall
		_SS->AsOutput();
     3d8:	8e 85       	ldd	r24, Y+14	; 0x0e
     3da:	9f 85       	ldd	r25, Y+15	; 0x0f
     3dc:	dc 01       	movw	r26, r24
     3de:	ed 91       	ld	r30, X+
     3e0:	fc 91       	ld	r31, X
     3e2:	04 88       	ldd	r0, Z+20	; 0x14
     3e4:	f5 89       	ldd	r31, Z+21	; 0x15
     3e6:	e0 2d       	mov	r30, r0
     3e8:	09 95       	icall

		_ChipSelect->Set(); // Disable
     3ea:	88 85       	ldd	r24, Y+8	; 0x08
     3ec:	99 85       	ldd	r25, Y+9	; 0x09
     3ee:	dc 01       	movw	r26, r24
     3f0:	ed 91       	ld	r30, X+
     3f2:	fc 91       	ld	r31, X
     3f4:	06 84       	ldd	r0, Z+14	; 0x0e
     3f6:	f7 85       	ldd	r31, Z+15	; 0x0f
     3f8:	e0 2d       	mov	r30, r0
     3fa:	09 95       	icall
	class SPI
	{
	public:
		void static InitializeAsMaster()
		{
			SPCR = 0;
     3fc:	1d b8       	out	0x0d, r1	; 13
			SPIEnable();
		}

		void static AsMaster()
		{
			SET(SPCR,(1<<MSTR));
     3fe:	6c 9a       	sbi	0x0d, 4	; 13
			CLEAR(SPCR,(1<<SPIE));
		}

		void static SPIEnable()
		{
			SET(SPCR,(1<<SPE));
     400:	6e 9a       	sbi	0x0d, 6	; 13
			SET(SPCR,(uint8_t)prescaler);
		}

		void static SetDoubleSpeed()
		{
			SET(SPSR,SPI2X);
     402:	8e b1       	in	r24, 0x0e	; 14
     404:	8e b9       	out	0x0e, r24	; 14
		SPI::InitializeAsMaster();
		SPI::SetDoubleSpeed();
		
		_ChipSelect->Clear();//Enable
     406:	88 85       	ldd	r24, Y+8	; 0x08
     408:	99 85       	ldd	r25, Y+9	; 0x09
     40a:	dc 01       	movw	r26, r24
     40c:	ed 91       	ld	r30, X+
     40e:	fc 91       	ld	r31, X
     410:	00 88       	ldd	r0, Z+16	; 0x10
     412:	f1 89       	ldd	r31, Z+17	; 0x11
     414:	e0 2d       	mov	r30, r0
     416:	09 95       	icall
		
		SPDR = 0xff;
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     41c:	77 9b       	sbis	0x0e, 7	; 14
     41e:	fe cf       	rjmp	.-4      	; 0x41c <_Z17InitializeProgramv+0x98>
		SPDR = 0xff;
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<< SPIF)));
     424:	77 9b       	sbis	0x0e, 7	; 14
     426:	fe cf       	rjmp	.-4      	; 0x424 <_Z17InitializeProgramv+0xa0>

		_ChipSelect->Set(); //Disable
     428:	ca ef       	ldi	r28, 0xFA	; 250
     42a:	d2 e0       	ldi	r29, 0x02	; 2
     42c:	88 85       	ldd	r24, Y+8	; 0x08
     42e:	99 85       	ldd	r25, Y+9	; 0x09
     430:	dc 01       	movw	r26, r24
     432:	ed 91       	ld	r30, X+
     434:	fc 91       	ld	r31, X
     436:	06 84       	ldd	r0, Z+14	; 0x0e
     438:	f7 85       	ldd	r31, Z+15	; 0x0f
     43a:	e0 2d       	mov	r30, r0
     43c:	09 95       	icall
	{
		_ChipSelect->Clear();
	}
	void Disable()
	{
		_ChipSelect->Set();
     43e:	88 85       	ldd	r24, Y+8	; 0x08
     440:	99 85       	ldd	r25, Y+9	; 0x09
     442:	dc 01       	movw	r26, r24
     444:	ed 91       	ld	r30, X+
     446:	fc 91       	ld	r31, X
     448:	06 84       	ldd	r0, Z+14	; 0x0e
     44a:	f7 85       	ldd	r31, Z+15	; 0x0f
     44c:	e0 2d       	mov	r30, r0
     44e:	09 95       	icall
	}


	void Enable()
	{
		_ChipSelect->Clear();
     450:	80 91 10 03 	lds	r24, 0x0310
     454:	90 91 11 03 	lds	r25, 0x0311
     458:	dc 01       	movw	r26, r24
     45a:	ed 91       	ld	r30, X+
     45c:	fc 91       	ld	r31, X
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	f1 89       	ldd	r31, Z+17	; 0x11
     462:	e0 2d       	mov	r30, r0
     464:	09 95       	icall
	#endif

	AS5048AChip.Initalize();
	AS5048AChip.Disable();
	debugDisplay.Enable();
	RegisterTasks();
     466:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z13RegisterTasksv>
	class Timer0
	{
	public:
		void static SetCompareValue(uint8_t compareRegisterValue)
		{
			OCR0 = compareRegisterValue;
     46a:	87 e0       	ldi	r24, 0x07	; 7
     46c:	8c bf       	out	0x3c, r24	; 60
			SET(TCCR0,(uint8_t)prescaler);
		}

		static void WaveFormMode(WaveForms waveForms)
		{
			CLEAR(TCCR0,(1<<WGM01)||(1<<WGM00));
     46e:	83 b7       	in	r24, 0x33	; 51
     470:	8e 7f       	andi	r24, 0xFE	; 254
     472:	83 bf       	out	0x33, r24	; 51
			SET(TCCR0,(uint8_t)waveForms);
     474:	83 b7       	in	r24, 0x33	; 51
     476:	88 60       	ori	r24, 0x08	; 8
     478:	83 bf       	out	0x33, r24	; 51
			AllBitsSet = CompareAndOverFlowInterrupts
		};

		volatile void static SetInterrupts(InterruptMask interrupt)
		{
			CLEAR(TIMSK,(TOIE0,OCIE0));
     47a:	89 b7       	in	r24, 0x39	; 57
     47c:	8e 7f       	andi	r24, 0xFE	; 254
     47e:	89 bf       	out	0x39, r24	; 57
			TIMSK |= interrupt;
     480:	89 b7       	in	r24, 0x39	; 57
     482:	82 60       	ori	r24, 0x02	; 2
     484:	89 bf       	out	0x39, r24	; 57
			SET(SFIOR,(1<<PSR10));
		}

		static void SetPrescaler(Prescalers prescaler)
		{
			CLEAR(TCCR0,(uint8_t)Prescalers::AllBitsSet);
     486:	83 b7       	in	r24, 0x33	; 51
     488:	88 7f       	andi	r24, 0xF8	; 248
     48a:	83 bf       	out	0x33, r24	; 51
			SET(TCCR0,(uint8_t)prescaler);
     48c:	83 b7       	in	r24, 0x33	; 51
     48e:	84 60       	ori	r24, 0x04	; 4
     490:	83 bf       	out	0x33, r24	; 51
{
	Timer0::SetCompareValue(7); 
	Timer0::WaveFormMode(Timer0::WaveForms::CTC);
	Timer0::SetInterrupts(CodeEasyAvr::Timer0::CompareMatchInterrupt);
	Timer0::SetPrescaler(Timer0::Prescalers::Prescaler_256);
	sei();
     492:	78 94       	sei
	AS5048AChip.Initalize();
	AS5048AChip.Disable();
	debugDisplay.Enable();
	RegisterTasks();
	EnableAsync();
	PWMInitialize();
     494:	0e 94 9a 01 	call	0x334	; 0x334 <_Z13PWMInitializev>
		_RegisterQ7 = &Q;
	}

	void Initialize()
	{
		_RegisterClk->AsOutput();
     498:	c2 ef       	ldi	r28, 0xF2	; 242
     49a:	d2 e0       	ldi	r29, 0x02	; 2
     49c:	88 81       	ld	r24, Y
     49e:	99 81       	ldd	r25, Y+1	; 0x01
     4a0:	dc 01       	movw	r26, r24
     4a2:	ed 91       	ld	r30, X+
     4a4:	fc 91       	ld	r31, X
     4a6:	04 88       	ldd	r0, Z+20	; 0x14
     4a8:	f5 89       	ldd	r31, Z+21	; 0x15
     4aa:	e0 2d       	mov	r30, r0
     4ac:	09 95       	icall
		_RegisterPL->AsOutput();
     4ae:	8a 81       	ldd	r24, Y+2	; 0x02
     4b0:	9b 81       	ldd	r25, Y+3	; 0x03
     4b2:	dc 01       	movw	r26, r24
     4b4:	ed 91       	ld	r30, X+
     4b6:	fc 91       	ld	r31, X
     4b8:	04 88       	ldd	r0, Z+20	; 0x14
     4ba:	f5 89       	ldd	r31, Z+21	; 0x15
     4bc:	e0 2d       	mov	r30, r0
     4be:	09 95       	icall
		_RegisterQ7->AsInput();
     4c0:	8c 81       	ldd	r24, Y+4	; 0x04
     4c2:	9d 81       	ldd	r25, Y+5	; 0x05
     4c4:	dc 01       	movw	r26, r24
     4c6:	ed 91       	ld	r30, X+
     4c8:	fc 91       	ld	r31, X
     4ca:	06 88       	ldd	r0, Z+22	; 0x16
     4cc:	f7 89       	ldd	r31, Z+23	; 0x17
     4ce:	e0 2d       	mov	r30, r0
     4d0:	09 95       	icall
		_RegisterPL->Clear();
     4d2:	8a 81       	ldd	r24, Y+2	; 0x02
     4d4:	9b 81       	ldd	r25, Y+3	; 0x03
     4d6:	dc 01       	movw	r26, r24
     4d8:	ed 91       	ld	r30, X+
     4da:	fc 91       	ld	r31, X
     4dc:	00 88       	ldd	r0, Z+16	; 0x10
     4de:	f1 89       	ldd	r31, Z+17	; 0x11
     4e0:	e0 2d       	mov	r30, r0
     4e2:	09 95       	icall
	wheelButtons.Initialize();
	NextCalibrateStage();
     4e4:	0e 94 99 00 	call	0x132	; 0x132 <_Z18NextCalibrateStagev>
}
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <main>:
}
#endif

int main()
{
	InitializeProgram();
     4ee:	0e 94 c2 01 	call	0x384	; 0x384 <_Z17InitializeProgramv>
		ErrorValue = AngleValue;
	}

	void Enable()
	{
		_ChipSelect->Clear();
     4f2:	ca ef       	ldi	r28, 0xFA	; 250
     4f4:	d2 e0       	ldi	r29, 0x02	; 2

	void ReadData()
	{
		Enable();
		lastAngleValue = AngleValue;
		SPDR = 0xff;
     4f6:	1f ef       	ldi	r17, 0xFF	; 255
		ErrorValue = AngleValue;
	}

	void Enable()
	{
		_ChipSelect->Clear();
     4f8:	88 85       	ldd	r24, Y+8	; 0x08
     4fa:	99 85       	ldd	r25, Y+9	; 0x09
     4fc:	dc 01       	movw	r26, r24
     4fe:	ed 91       	ld	r30, X+
     500:	fc 91       	ld	r31, X
     502:	00 88       	ldd	r0, Z+16	; 0x10
     504:	f1 89       	ldd	r31, Z+17	; 0x11
     506:	e0 2d       	mov	r30, r0
     508:	09 95       	icall
	}

	void ReadData()
	{
		Enable();
		lastAngleValue = AngleValue;
     50a:	8a 81       	ldd	r24, Y+2	; 0x02
     50c:	8b 83       	std	Y+3, r24	; 0x03
		SPDR = 0xff;
     50e:	1f b9       	out	0x0f, r17	; 15
		while(!(SPSR & (1<< SPIF)));
     510:	77 9b       	sbis	0x0e, 7	; 14
     512:	fe cf       	rjmp	.-4      	; 0x510 <main+0x22>
		AngleValue = (SPDR&0b00011111)<<3 ;//First  byte
     514:	8f b1       	in	r24, 0x0f	; 15
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	8a 83       	std	Y+2, r24	; 0x02
		SPDR = 0xff;
     526:	1f b9       	out	0x0f, r17	; 15
		while(!(SPSR & (1<< SPIF)));
     528:	77 9b       	sbis	0x0e, 7	; 14
     52a:	fe cf       	rjmp	.-4      	; 0x528 <main+0x3a>
		AngleValue |= (SPDR)>>5;//Second Byte
     52c:	8f b1       	in	r24, 0x0f	; 15
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	95 95       	asr	r25
     532:	87 95       	ror	r24
     534:	95 95       	asr	r25
     536:	87 95       	ror	r24
     538:	95 95       	asr	r25
     53a:	87 95       	ror	r24
     53c:	95 95       	asr	r25
     53e:	87 95       	ror	r24
     540:	95 95       	asr	r25
     542:	87 95       	ror	r24
     544:	2a 81       	ldd	r18, Y+2	; 0x02
     546:	82 2b       	or	r24, r18
     548:	8a 83       	std	Y+2, r24	; 0x02
	{
		_ChipSelect->Clear();
	}
	void Disable()
	{
		_ChipSelect->Set();
     54a:	88 85       	ldd	r24, Y+8	; 0x08
     54c:	99 85       	ldd	r25, Y+9	; 0x09
     54e:	dc 01       	movw	r26, r24
     550:	ed 91       	ld	r30, X+
     552:	fc 91       	ld	r31, X
     554:	06 84       	ldd	r0, Z+14	; 0x0e
     556:	f7 85       	ldd	r31, Z+15	; 0x0f
     558:	e0 2d       	mov	r30, r0
     55a:	09 95       	icall
	}

	void CalculatePosition()
	{
		ReadData();
		if (lastAngleValue > 192 && AngleValue <63 ) ++Spin;
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	81 3c       	cpi	r24, 0xC1	; 193
     560:	30 f0       	brcs	.+12     	; 0x56e <main+0x80>
     562:	9a 81       	ldd	r25, Y+2	; 0x02
     564:	9f 33       	cpi	r25, 0x3F	; 63
     566:	18 f4       	brcc	.+6      	; 0x56e <main+0x80>
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	9f 5f       	subi	r25, 0xFF	; 255
     56c:	9c 83       	std	Y+4, r25	; 0x04
		if (AngleValue > 192 && lastAngleValue<63 )	--Spin;
     56e:	6a 81       	ldd	r22, Y+2	; 0x02
     570:	61 3c       	cpi	r22, 0xC1	; 193
     572:	28 f0       	brcs	.+10     	; 0x57e <main+0x90>
     574:	8f 33       	cpi	r24, 0x3F	; 63
     576:	18 f4       	brcc	.+6      	; 0x57e <main+0x90>
     578:	8c 81       	ldd	r24, Y+4	; 0x04
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	8c 83       	std	Y+4, r24	; 0x04

		CalculatedPosition = (uint16_t)(((Spin<<8) |(AngleValue)) - (ErrorValue));
     57e:	8c 81       	ldd	r24, Y+4	; 0x04
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	78 2b       	or	r23, r24
     584:	8d 81       	ldd	r24, Y+5	; 0x05
     586:	6b 01       	movw	r12, r22
     588:	c8 1a       	sub	r12, r24
     58a:	d1 08       	sbc	r13, r1
     58c:	d9 82       	std	Y+1, r13	; 0x01
     58e:	c8 82       	st	Y, r12
	while("forever")
	{
		AS5048AChip.CalculatePosition();
		if ( (AS5048AChip.CalculatedPosition) <= RotateLimit)
     590:	80 91 3b 03 	lds	r24, 0x033B
     594:	90 91 3c 03 	lds	r25, 0x033C
     598:	8c 15       	cp	r24, r12
     59a:	9d 05       	cpc	r25, r13
     59c:	08 f4       	brcc	.+2      	; 0x5a0 <main+0xb2>
     59e:	ac cf       	rjmp	.-168    	; 0x4f8 <main+0xa>
		{
			OCR1A = (ICR1*((float)AS5048AChip.CalculatedPosition/RotateLimit));
     5a0:	66 b5       	in	r22, 0x26	; 38
     5a2:	77 b5       	in	r23, 0x27	; 39
     5a4:	e0 90 3b 03 	lds	r14, 0x033B
     5a8:	f0 90 3c 03 	lds	r15, 0x033C
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 0d 08 	call	0x101a	; 0x101a <__floatunsisf>
     5b4:	4b 01       	movw	r8, r22
     5b6:	5c 01       	movw	r10, r24
     5b8:	b6 01       	movw	r22, r12
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 0d 08 	call	0x101a	; 0x101a <__floatunsisf>
     5c2:	2b 01       	movw	r4, r22
     5c4:	3c 01       	movw	r6, r24
     5c6:	b7 01       	movw	r22, r14
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 0d 08 	call	0x101a	; 0x101a <__floatunsisf>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	c3 01       	movw	r24, r6
     5d6:	b2 01       	movw	r22, r4
     5d8:	0e 94 6c 07 	call	0xed8	; 0xed8 <__divsf3>
     5dc:	9b 01       	movw	r18, r22
     5de:	ac 01       	movw	r20, r24
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     5e8:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fixunssfsi>
     5ec:	7b bd       	out	0x2b, r23	; 43
     5ee:	6a bd       	out	0x2a, r22	; 42
     5f0:	83 cf       	rjmp	.-250    	; 0x4f8 <main+0xa>

000005f2 <_GLOBAL__sub_I__Znwj>:
	Task* tasks[NumberOfTasks];
	uint8_t currentTaskNumber;
	public:
TaskManager()
{
	currentTaskNumber = 0;
     5f2:	10 92 53 03 	sts	0x0353, r1
     5f6:	e3 e4       	ldi	r30, 0x43	; 67
     5f8:	f3 e0       	ldi	r31, 0x03	; 3
     5fa:	83 e5       	ldi	r24, 0x53	; 83
     5fc:	93 e0       	ldi	r25, 0x03	; 3
	for (size_t i = 0; i < NumberOfTasks; i++)
	{
		tasks[i] = nullptr;
     5fe:	11 92       	st	Z+, r1
     600:	11 92       	st	Z+, r1
	uint8_t currentTaskNumber;
	public:
TaskManager()
{
	currentTaskNumber = 0;
	for (size_t i = 0; i < NumberOfTasks; i++)
     602:	e8 17       	cp	r30, r24
     604:	f9 07       	cpc	r31, r25
     606:	d9 f7       	brne	.-10     	; 0x5fe <_GLOBAL__sub_I__Znwj+0xc>
	const uint8_t SH1106_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29;
	const uint8_t SH1106_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A;
#pragma endregion Const
public:
	Sh1106(PinSBase &DataCommand,PinSBase &Reset,PinSBase& Mosi,PinSBase& ChipSelect, PinSBase& Clk, PinSBase &Miso, PinSBase & SS)
	{
     608:	ea e0       	ldi	r30, 0x0A	; 10
     60a:	f3 e0       	ldi	r31, 0x03	; 3
     60c:	80 e8       	ldi	r24, 0x80	; 128
     60e:	86 87       	std	Z+14, r24	; 0x0e
     610:	90 eb       	ldi	r25, 0xB0	; 176
     612:	97 87       	std	Z+15, r25	; 0x0f
     614:	80 ef       	ldi	r24, 0xF0	; 240
     616:	80 8b       	std	Z+16, r24	; 0x10
     618:	81 e8       	ldi	r24, 0x81	; 129
     61a:	81 8b       	std	Z+17, r24	; 0x11
     61c:	84 ea       	ldi	r24, 0xA4	; 164
     61e:	82 8b       	std	Z+18, r24	; 0x12
     620:	85 ea       	ldi	r24, 0xA5	; 165
     622:	83 8b       	std	Z+19, r24	; 0x13
     624:	86 ea       	ldi	r24, 0xA6	; 166
     626:	84 8b       	std	Z+20, r24	; 0x14
     628:	87 ea       	ldi	r24, 0xA7	; 167
     62a:	85 8b       	std	Z+21, r24	; 0x15
     62c:	8e ea       	ldi	r24, 0xAE	; 174
     62e:	86 8b       	std	Z+22, r24	; 0x16
     630:	8f ea       	ldi	r24, 0xAF	; 175
     632:	87 8b       	std	Z+23, r24	; 0x17
     634:	83 ed       	ldi	r24, 0xD3	; 211
     636:	80 8f       	std	Z+24, r24	; 0x18
     638:	8a ed       	ldi	r24, 0xDA	; 218
     63a:	81 8f       	std	Z+25, r24	; 0x19
     63c:	8b ed       	ldi	r24, 0xDB	; 219
     63e:	82 8f       	std	Z+26, r24	; 0x1a
     640:	85 ed       	ldi	r24, 0xD5	; 213
     642:	83 8f       	std	Z+27, r24	; 0x1b
     644:	89 ed       	ldi	r24, 0xD9	; 217
     646:	84 8f       	std	Z+28, r24	; 0x1c
     648:	88 ea       	ldi	r24, 0xA8	; 168
     64a:	85 8f       	std	Z+29, r24	; 0x1d
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	86 8f       	std	Z+30, r24	; 0x1e
     650:	20 e1       	ldi	r18, 0x10	; 16
     652:	27 8f       	std	Z+31, r18	; 0x1f
     654:	20 e4       	ldi	r18, 0x40	; 64
     656:	20 a3       	std	Z+32, r18	; 0x20
     658:	20 e2       	ldi	r18, 0x20	; 32
     65a:	21 a3       	std	Z+33, r18	; 0x21
     65c:	21 e2       	ldi	r18, 0x21	; 33
     65e:	22 a3       	std	Z+34, r18	; 0x22
     660:	93 a3       	std	Z+35, r25	; 0x23
     662:	90 ec       	ldi	r25, 0xC0	; 192
     664:	94 a3       	std	Z+36, r25	; 0x24
     666:	98 ec       	ldi	r25, 0xC8	; 200
     668:	95 a3       	std	Z+37, r25	; 0x25
     66a:	90 ea       	ldi	r25, 0xA0	; 160
     66c:	96 a3       	std	Z+38, r25	; 0x26
     66e:	9d ea       	ldi	r25, 0xAD	; 173
     670:	97 a3       	std	Z+39, r25	; 0x27
     672:	9b e8       	ldi	r25, 0x8B	; 139
     674:	90 a7       	std	Z+40, r25	; 0x28
     676:	81 a7       	std	Z+41, r24	; 0x29
     678:	8f e2       	ldi	r24, 0x2F	; 47
     67a:	82 a7       	std	Z+42, r24	; 0x2a
     67c:	8e e2       	ldi	r24, 0x2E	; 46
     67e:	83 a7       	std	Z+43, r24	; 0x2b
     680:	83 ea       	ldi	r24, 0xA3	; 163
     682:	84 a7       	std	Z+44, r24	; 0x2c
     684:	86 e2       	ldi	r24, 0x26	; 38
     686:	85 a7       	std	Z+45, r24	; 0x2d
     688:	87 e2       	ldi	r24, 0x27	; 39
     68a:	86 a7       	std	Z+46, r24	; 0x2e
     68c:	89 e2       	ldi	r24, 0x29	; 41
     68e:	87 a7       	std	Z+47, r24	; 0x2f
     690:	8a e2       	ldi	r24, 0x2A	; 42
     692:	80 ab       	std	Z+48, r24	; 0x30
		_DataCommand = &DataCommand;
     694:	8c e7       	ldi	r24, 0x7C	; 124
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	91 83       	std	Z+1, r25	; 0x01
     69a:	80 83       	st	Z, r24
		_Reset = &Reset;
     69c:	8e e7       	ldi	r24, 0x7E	; 126
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	93 83       	std	Z+3, r25	; 0x03
     6a2:	82 83       	std	Z+2, r24	; 0x02
		_Miso = &Miso;
     6a4:	62 e7       	ldi	r22, 0x72	; 114
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	73 87       	std	Z+11, r23	; 0x0b
     6aa:	62 87       	std	Z+10, r22	; 0x0a
		_Mosi = &Mosi;
     6ac:	44 e7       	ldi	r20, 0x74	; 116
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	55 83       	std	Z+5, r21	; 0x05
     6b2:	44 83       	std	Z+4, r20	; 0x04
		_ChipSelect = &ChipSelect;
     6b4:	8a e7       	ldi	r24, 0x7A	; 122
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	97 83       	std	Z+7, r25	; 0x07
     6ba:	86 83       	std	Z+6, r24	; 0x06
		_SS = &SS;
     6bc:	26 e7       	ldi	r18, 0x76	; 118
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	35 87       	std	Z+13, r19	; 0x0d
     6c2:	24 87       	std	Z+12, r18	; 0x0c
		_Clk = &Clk;
     6c4:	80 e7       	ldi	r24, 0x70	; 112
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	91 87       	std	Z+9, r25	; 0x09
     6ca:	80 87       	std	Z+8, r24	; 0x08
	PinSBase * _Clk;
	PinSBase * _Miso;
	PinSBase * _SS;
public:
	AS5048A(PinSBase& Mosi, PinSBase &SS, PinSBase& Clk, PinSBase &Miso,PinSBase& ChipSelect)
	{
     6cc:	ea ef       	ldi	r30, 0xFA	; 250
     6ce:	f2 e0       	ldi	r31, 0x02	; 2
     6d0:	11 82       	std	Z+1, r1	; 0x01
     6d2:	10 82       	st	Z, r1
     6d4:	12 82       	std	Z+2, r1	; 0x02
     6d6:	13 82       	std	Z+3, r1	; 0x03
     6d8:	14 82       	std	Z+4, r1	; 0x04
     6da:	15 82       	std	Z+5, r1	; 0x05
		_Miso = &Miso;
     6dc:	75 87       	std	Z+13, r23	; 0x0d
     6de:	64 87       	std	Z+12, r22	; 0x0c
		_Mosi = &Mosi;
     6e0:	57 83       	std	Z+7, r21	; 0x07
     6e2:	46 83       	std	Z+6, r20	; 0x06
		_ChipSelect = &ChipSelect;
     6e4:	48 e7       	ldi	r20, 0x78	; 120
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	51 87       	std	Z+9, r21	; 0x09
     6ea:	40 87       	std	Z+8, r20	; 0x08
		_SS = &SS;
     6ec:	37 87       	std	Z+15, r19	; 0x0f
     6ee:	26 87       	std	Z+14, r18	; 0x0e
		_Clk = &Clk;
     6f0:	93 87       	std	Z+11, r25	; 0x0b
     6f2:	82 87       	std	Z+10, r24	; 0x0a
	PinSBase *_RegisterClk,*_RegisterPL,*_RegisterQ7;
	public:
	volatile uint16_t lastData;
	ShiftRegisterButtons(PinSBase &Clk, PinSBase &PL, PinSBase &Q)
	{
		_RegisterClk = &Clk;
     6f4:	e2 ef       	ldi	r30, 0xF2	; 242
     6f6:	f2 e0       	ldi	r31, 0x02	; 2
     6f8:	80 e8       	ldi	r24, 0x80	; 128
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	91 83       	std	Z+1, r25	; 0x01
     6fe:	80 83       	st	Z, r24
		_RegisterPL = &PL;
     700:	82 e8       	ldi	r24, 0x82	; 130
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	93 83       	std	Z+3, r25	; 0x03
     706:	82 83       	std	Z+2, r24	; 0x02
		_RegisterQ7 = &Q;
     708:	84 e8       	ldi	r24, 0x84	; 132
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	95 83       	std	Z+5, r25	; 0x05
     70e:	84 83       	std	Z+4, r24	; 0x04

class Task;

typedef void(*Func)(Task*);

class Task
     710:	10 92 f1 02 	sts	0x02F1, r1
     714:	10 92 f0 02 	sts	0x02F0, r1
     718:	08 95       	ret

0000071a <_GLOBAL__sub_D__Znwj>:
		//	debugDisplay.Enable();
		//Debug();
		//debugDisplay.Disable();
		#endif
	}
}
     71a:	08 95       	ret

0000071c <_ZN4PinSILh53ELh51ELh52ELh6EE5ClearEv>:
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     71c:	ae 98       	cbi	0x15, 6	; 21
     71e:	08 95       	ret

00000720 <_ZN4PinSILh53ELh51ELh52ELh7EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     720:	af 9a       	sbi	0x15, 7	; 21
     722:	08 95       	ret

00000724 <_ZN4PinSILh53ELh51ELh52ELh7EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     724:	af 98       	cbi	0x15, 7	; 21
     726:	08 95       	ret

00000728 <_ZN4PinSILh53ELh51ELh52ELh6EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     728:	ae 9a       	sbi	0x15, 6	; 21
     72a:	08 95       	ret

0000072c <_ZN4PinSILh53ELh51ELh52ELh0EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     72c:	a8 9a       	sbi	0x15, 0	; 21
     72e:	08 95       	ret

00000730 <_ZN4PinSILh53ELh51ELh52ELh1EE7FastSetEv>:
     730:	a9 9a       	sbi	0x15, 1	; 21
     732:	08 95       	ret

00000734 <_ZN4PinSILh53ELh51ELh52ELh2EE7FastSetEv>:
     734:	aa 9a       	sbi	0x15, 2	; 21
     736:	08 95       	ret

00000738 <_ZN4PinSILh53ELh51ELh52ELh3EE7FastSetEv>:
     738:	ab 9a       	sbi	0x15, 3	; 21
     73a:	08 95       	ret

0000073c <_ZN4PinSILh53ELh51ELh52ELh4EE7FastSetEv>:
     73c:	ac 9a       	sbi	0x15, 4	; 21
     73e:	08 95       	ret

00000740 <_ZN4PinSILh53ELh51ELh52ELh5EE7FastSetEv>:
     740:	ad 9a       	sbi	0x15, 5	; 21
     742:	08 95       	ret

00000744 <_ZN4PinSILh53ELh51ELh52ELh0EE5ClearEv>:
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     744:	a8 98       	cbi	0x15, 0	; 21
     746:	08 95       	ret

00000748 <_ZN4PinSILh53ELh51ELh52ELh1EE5ClearEv>:
     748:	a9 98       	cbi	0x15, 1	; 21
     74a:	08 95       	ret

0000074c <_ZN4PinSILh53ELh51ELh52ELh2EE5ClearEv>:
     74c:	aa 98       	cbi	0x15, 2	; 21
     74e:	08 95       	ret

00000750 <_ZN4PinSILh53ELh51ELh52ELh3EE5ClearEv>:
     750:	ab 98       	cbi	0x15, 3	; 21
     752:	08 95       	ret

00000754 <_ZN4PinSILh53ELh51ELh52ELh4EE5ClearEv>:
     754:	ac 98       	cbi	0x15, 4	; 21
     756:	08 95       	ret

00000758 <_ZN4PinSILh53ELh51ELh52ELh5EE5ClearEv>:
     758:	ad 98       	cbi	0x15, 5	; 21
     75a:	08 95       	ret

0000075c <_ZN4PinSILh53ELh51ELh52ELh7EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     75c:	a7 9a       	sbi	0x14, 7	; 20
     75e:	08 95       	ret

00000760 <_ZN4PinSILh53ELh51ELh52ELh6EE8AsOutputEv>:
     760:	a6 9a       	sbi	0x14, 6	; 20
     762:	08 95       	ret

00000764 <_ZN4PinSILh53ELh51ELh52ELh0EED1Ev>:
	virtual void AsInput(){}
	virtual ~PinSBase(){}
};

 template<const volatile uint8_t PortAddress,const volatile uint8_t PinAddress,const volatile uint8_t DdrAddress,const volatile uint8_t NOPin>
 class PinS : public PinSBase
     764:	08 95       	ret

00000766 <_ZN4PinSILh53ELh51ELh52ELh1EED1Ev>:
     766:	08 95       	ret

00000768 <_ZN4PinSILh53ELh51ELh52ELh2EED1Ev>:
     768:	08 95       	ret

0000076a <_ZN4PinSILh53ELh51ELh52ELh3EED1Ev>:
     76a:	08 95       	ret

0000076c <_ZN4PinSILh53ELh51ELh52ELh4EED1Ev>:
     76c:	08 95       	ret

0000076e <_ZN4PinSILh53ELh51ELh52ELh5EED1Ev>:
     76e:	08 95       	ret

00000770 <_ZN4PinSILh53ELh51ELh52ELh6EED1Ev>:
     770:	08 95       	ret

00000772 <_ZN4PinSILh53ELh51ELh52ELh7EED1Ev>:
     772:	08 95       	ret

00000774 <_ZN4PinSILh56ELh54ELh55ELh7EED1Ev>:
     774:	08 95       	ret

00000776 <_ZN4PinSILh56ELh54ELh55ELh6EED1Ev>:
     776:	08 95       	ret

00000778 <_ZN4PinSILh56ELh54ELh55ELh5EED1Ev>:
     778:	08 95       	ret

0000077a <_ZN4PinSILh56ELh54ELh55ELh4EED1Ev>:
     77a:	08 95       	ret

0000077c <_ZN4PinSILh56ELh54ELh55ELh3EED1Ev>:
     77c:	08 95       	ret

0000077e <_ZN4PinSILh56ELh54ELh55ELh2EED1Ev>:
     77e:	08 95       	ret

00000780 <_ZN4PinSILh56ELh54ELh55ELh1EED1Ev>:
     780:	08 95       	ret

00000782 <_ZN4PinSILh56ELh54ELh55ELh0EED1Ev>:
     782:	08 95       	ret

00000784 <_ZN4PinSILh59ELh57ELh58ELh2EED1Ev>:
     784:	08 95       	ret

00000786 <_ZN4PinSILh59ELh57ELh58ELh1EED1Ev>:
     786:	08 95       	ret

00000788 <_ZN4PinSILh59ELh57ELh58ELh0EED1Ev>:
     788:	08 95       	ret

0000078a <_ZN4PinSILh53ELh51ELh52ELh0EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     78a:	a8 98       	cbi	0x15, 0	; 21
     78c:	08 95       	ret

0000078e <_ZN4PinSILh53ELh51ELh52ELh0EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     78e:	95 b3       	in	r25, 0x15	; 21
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	89 27       	eor	r24, r25
     794:	85 bb       	out	0x15, r24	; 21
     796:	08 95       	ret

00000798 <_ZN4PinSILh53ELh51ELh52ELh0EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     798:	a0 9a       	sbi	0x14, 0	; 20
     79a:	08 95       	ret

0000079c <_ZN4PinSILh53ELh51ELh52ELh0EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     79c:	a0 98       	cbi	0x14, 0	; 20
     79e:	08 95       	ret

000007a0 <_ZN4PinSILh53ELh51ELh52ELh0EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     7a0:	66 23       	and	r22, r22
     7a2:	41 f0       	breq	.+16     	; 0x7b4 <_ZN4PinSILh53ELh51ELh52ELh0EE7BoolSetEb+0x14>
			Set();
     7a4:	dc 01       	movw	r26, r24
     7a6:	ed 91       	ld	r30, X+
     7a8:	fc 91       	ld	r31, X
     7aa:	06 84       	ldd	r0, Z+14	; 0x0e
     7ac:	f7 85       	ldd	r31, Z+15	; 0x0f
     7ae:	e0 2d       	mov	r30, r0
     7b0:	09 95       	icall
     7b2:	08 95       	ret
		else
			Clear();
     7b4:	dc 01       	movw	r26, r24
     7b6:	ed 91       	ld	r30, X+
     7b8:	fc 91       	ld	r31, X
     7ba:	00 88       	ldd	r0, Z+16	; 0x10
     7bc:	f1 89       	ldd	r31, Z+17	; 0x11
     7be:	e0 2d       	mov	r30, r0
     7c0:	09 95       	icall
     7c2:	08 95       	ret

000007c4 <_ZN4PinSILh53ELh51ELh52ELh0EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     7c4:	83 b3       	in	r24, 0x13	; 19
    }
     7c6:	81 70       	andi	r24, 0x01	; 1
     7c8:	08 95       	ret

000007ca <_ZN4PinSILh53ELh51ELh52ELh0EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     7ca:	a8 9a       	sbi	0x15, 0	; 21
     7cc:	08 95       	ret

000007ce <_ZN4PinSILh53ELh51ELh52ELh0EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     7ce:	95 b3       	in	r25, 0x15	; 21
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	89 27       	eor	r24, r25
     7d4:	85 bb       	out	0x15, r24	; 21
     7d6:	08 95       	ret

000007d8 <_ZN4PinSILh53ELh51ELh52ELh0EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     7d8:	a0 9a       	sbi	0x14, 0	; 20
     7da:	08 95       	ret

000007dc <_ZN4PinSILh53ELh51ELh52ELh0EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     7dc:	a0 98       	cbi	0x14, 0	; 20
     7de:	08 95       	ret

000007e0 <_ZN4PinSILh53ELh51ELh52ELh1EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     7e0:	a9 98       	cbi	0x15, 1	; 21
     7e2:	08 95       	ret

000007e4 <_ZN4PinSILh53ELh51ELh52ELh1EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     7e4:	95 b3       	in	r25, 0x15	; 21
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	89 27       	eor	r24, r25
     7ea:	85 bb       	out	0x15, r24	; 21
     7ec:	08 95       	ret

000007ee <_ZN4PinSILh53ELh51ELh52ELh1EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     7ee:	a1 9a       	sbi	0x14, 1	; 20
     7f0:	08 95       	ret

000007f2 <_ZN4PinSILh53ELh51ELh52ELh1EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     7f2:	a1 98       	cbi	0x14, 1	; 20
     7f4:	08 95       	ret

000007f6 <_ZN4PinSILh53ELh51ELh52ELh1EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     7f6:	66 23       	and	r22, r22
     7f8:	41 f0       	breq	.+16     	; 0x80a <_ZN4PinSILh53ELh51ELh52ELh1EE7BoolSetEb+0x14>
			Set();
     7fa:	dc 01       	movw	r26, r24
     7fc:	ed 91       	ld	r30, X+
     7fe:	fc 91       	ld	r31, X
     800:	06 84       	ldd	r0, Z+14	; 0x0e
     802:	f7 85       	ldd	r31, Z+15	; 0x0f
     804:	e0 2d       	mov	r30, r0
     806:	09 95       	icall
     808:	08 95       	ret
		else
			Clear();
     80a:	dc 01       	movw	r26, r24
     80c:	ed 91       	ld	r30, X+
     80e:	fc 91       	ld	r31, X
     810:	00 88       	ldd	r0, Z+16	; 0x10
     812:	f1 89       	ldd	r31, Z+17	; 0x11
     814:	e0 2d       	mov	r30, r0
     816:	09 95       	icall
     818:	08 95       	ret

0000081a <_ZN4PinSILh53ELh51ELh52ELh1EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     81a:	83 b3       	in	r24, 0x13	; 19
    }
     81c:	86 95       	lsr	r24
     81e:	81 70       	andi	r24, 0x01	; 1
     820:	08 95       	ret

00000822 <_ZN4PinSILh53ELh51ELh52ELh1EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     822:	a9 9a       	sbi	0x15, 1	; 21
     824:	08 95       	ret

00000826 <_ZN4PinSILh53ELh51ELh52ELh1EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     826:	95 b3       	in	r25, 0x15	; 21
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	89 27       	eor	r24, r25
     82c:	85 bb       	out	0x15, r24	; 21
     82e:	08 95       	ret

00000830 <_ZN4PinSILh53ELh51ELh52ELh1EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     830:	a1 9a       	sbi	0x14, 1	; 20
     832:	08 95       	ret

00000834 <_ZN4PinSILh53ELh51ELh52ELh1EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     834:	a1 98       	cbi	0x14, 1	; 20
     836:	08 95       	ret

00000838 <_ZN4PinSILh53ELh51ELh52ELh2EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     838:	aa 98       	cbi	0x15, 2	; 21
     83a:	08 95       	ret

0000083c <_ZN4PinSILh53ELh51ELh52ELh2EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     83c:	95 b3       	in	r25, 0x15	; 21
     83e:	84 e0       	ldi	r24, 0x04	; 4
     840:	89 27       	eor	r24, r25
     842:	85 bb       	out	0x15, r24	; 21
     844:	08 95       	ret

00000846 <_ZN4PinSILh53ELh51ELh52ELh2EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     846:	a2 9a       	sbi	0x14, 2	; 20
     848:	08 95       	ret

0000084a <_ZN4PinSILh53ELh51ELh52ELh2EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     84a:	a2 98       	cbi	0x14, 2	; 20
     84c:	08 95       	ret

0000084e <_ZN4PinSILh53ELh51ELh52ELh2EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     84e:	66 23       	and	r22, r22
     850:	41 f0       	breq	.+16     	; 0x862 <_ZN4PinSILh53ELh51ELh52ELh2EE7BoolSetEb+0x14>
			Set();
     852:	dc 01       	movw	r26, r24
     854:	ed 91       	ld	r30, X+
     856:	fc 91       	ld	r31, X
     858:	06 84       	ldd	r0, Z+14	; 0x0e
     85a:	f7 85       	ldd	r31, Z+15	; 0x0f
     85c:	e0 2d       	mov	r30, r0
     85e:	09 95       	icall
     860:	08 95       	ret
		else
			Clear();
     862:	dc 01       	movw	r26, r24
     864:	ed 91       	ld	r30, X+
     866:	fc 91       	ld	r31, X
     868:	00 88       	ldd	r0, Z+16	; 0x10
     86a:	f1 89       	ldd	r31, Z+17	; 0x11
     86c:	e0 2d       	mov	r30, r0
     86e:	09 95       	icall
     870:	08 95       	ret

00000872 <_ZN4PinSILh53ELh51ELh52ELh2EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     872:	83 b3       	in	r24, 0x13	; 19
    }
     874:	82 fb       	bst	r24, 2
     876:	88 27       	eor	r24, r24
     878:	80 f9       	bld	r24, 0
     87a:	08 95       	ret

0000087c <_ZN4PinSILh53ELh51ELh52ELh2EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     87c:	aa 9a       	sbi	0x15, 2	; 21
     87e:	08 95       	ret

00000880 <_ZN4PinSILh53ELh51ELh52ELh2EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     880:	95 b3       	in	r25, 0x15	; 21
     882:	84 e0       	ldi	r24, 0x04	; 4
     884:	89 27       	eor	r24, r25
     886:	85 bb       	out	0x15, r24	; 21
     888:	08 95       	ret

0000088a <_ZN4PinSILh53ELh51ELh52ELh2EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     88a:	a2 9a       	sbi	0x14, 2	; 20
     88c:	08 95       	ret

0000088e <_ZN4PinSILh53ELh51ELh52ELh2EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     88e:	a2 98       	cbi	0x14, 2	; 20
     890:	08 95       	ret

00000892 <_ZN4PinSILh53ELh51ELh52ELh3EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     892:	ab 98       	cbi	0x15, 3	; 21
     894:	08 95       	ret

00000896 <_ZN4PinSILh53ELh51ELh52ELh3EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     896:	95 b3       	in	r25, 0x15	; 21
     898:	88 e0       	ldi	r24, 0x08	; 8
     89a:	89 27       	eor	r24, r25
     89c:	85 bb       	out	0x15, r24	; 21
     89e:	08 95       	ret

000008a0 <_ZN4PinSILh53ELh51ELh52ELh3EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     8a0:	a3 9a       	sbi	0x14, 3	; 20
     8a2:	08 95       	ret

000008a4 <_ZN4PinSILh53ELh51ELh52ELh3EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     8a4:	a3 98       	cbi	0x14, 3	; 20
     8a6:	08 95       	ret

000008a8 <_ZN4PinSILh53ELh51ELh52ELh3EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     8a8:	66 23       	and	r22, r22
     8aa:	41 f0       	breq	.+16     	; 0x8bc <_ZN4PinSILh53ELh51ELh52ELh3EE7BoolSetEb+0x14>
			Set();
     8ac:	dc 01       	movw	r26, r24
     8ae:	ed 91       	ld	r30, X+
     8b0:	fc 91       	ld	r31, X
     8b2:	06 84       	ldd	r0, Z+14	; 0x0e
     8b4:	f7 85       	ldd	r31, Z+15	; 0x0f
     8b6:	e0 2d       	mov	r30, r0
     8b8:	09 95       	icall
     8ba:	08 95       	ret
		else
			Clear();
     8bc:	dc 01       	movw	r26, r24
     8be:	ed 91       	ld	r30, X+
     8c0:	fc 91       	ld	r31, X
     8c2:	00 88       	ldd	r0, Z+16	; 0x10
     8c4:	f1 89       	ldd	r31, Z+17	; 0x11
     8c6:	e0 2d       	mov	r30, r0
     8c8:	09 95       	icall
     8ca:	08 95       	ret

000008cc <_ZN4PinSILh53ELh51ELh52ELh3EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     8cc:	83 b3       	in	r24, 0x13	; 19
    }
     8ce:	83 fb       	bst	r24, 3
     8d0:	88 27       	eor	r24, r24
     8d2:	80 f9       	bld	r24, 0
     8d4:	08 95       	ret

000008d6 <_ZN4PinSILh53ELh51ELh52ELh3EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     8d6:	ab 9a       	sbi	0x15, 3	; 21
     8d8:	08 95       	ret

000008da <_ZN4PinSILh53ELh51ELh52ELh3EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     8da:	95 b3       	in	r25, 0x15	; 21
     8dc:	88 e0       	ldi	r24, 0x08	; 8
     8de:	89 27       	eor	r24, r25
     8e0:	85 bb       	out	0x15, r24	; 21
     8e2:	08 95       	ret

000008e4 <_ZN4PinSILh53ELh51ELh52ELh3EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     8e4:	a3 9a       	sbi	0x14, 3	; 20
     8e6:	08 95       	ret

000008e8 <_ZN4PinSILh53ELh51ELh52ELh3EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     8e8:	a3 98       	cbi	0x14, 3	; 20
     8ea:	08 95       	ret

000008ec <_ZN4PinSILh53ELh51ELh52ELh4EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     8ec:	ac 98       	cbi	0x15, 4	; 21
     8ee:	08 95       	ret

000008f0 <_ZN4PinSILh53ELh51ELh52ELh4EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     8f0:	95 b3       	in	r25, 0x15	; 21
     8f2:	80 e1       	ldi	r24, 0x10	; 16
     8f4:	89 27       	eor	r24, r25
     8f6:	85 bb       	out	0x15, r24	; 21
     8f8:	08 95       	ret

000008fa <_ZN4PinSILh53ELh51ELh52ELh4EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     8fa:	a4 9a       	sbi	0x14, 4	; 20
     8fc:	08 95       	ret

000008fe <_ZN4PinSILh53ELh51ELh52ELh4EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     8fe:	a4 98       	cbi	0x14, 4	; 20
     900:	08 95       	ret

00000902 <_ZN4PinSILh53ELh51ELh52ELh4EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     902:	66 23       	and	r22, r22
     904:	41 f0       	breq	.+16     	; 0x916 <_ZN4PinSILh53ELh51ELh52ELh4EE7BoolSetEb+0x14>
			Set();
     906:	dc 01       	movw	r26, r24
     908:	ed 91       	ld	r30, X+
     90a:	fc 91       	ld	r31, X
     90c:	06 84       	ldd	r0, Z+14	; 0x0e
     90e:	f7 85       	ldd	r31, Z+15	; 0x0f
     910:	e0 2d       	mov	r30, r0
     912:	09 95       	icall
     914:	08 95       	ret
		else
			Clear();
     916:	dc 01       	movw	r26, r24
     918:	ed 91       	ld	r30, X+
     91a:	fc 91       	ld	r31, X
     91c:	00 88       	ldd	r0, Z+16	; 0x10
     91e:	f1 89       	ldd	r31, Z+17	; 0x11
     920:	e0 2d       	mov	r30, r0
     922:	09 95       	icall
     924:	08 95       	ret

00000926 <_ZN4PinSILh53ELh51ELh52ELh4EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     926:	83 b3       	in	r24, 0x13	; 19
    }
     928:	82 95       	swap	r24
     92a:	81 70       	andi	r24, 0x01	; 1
     92c:	08 95       	ret

0000092e <_ZN4PinSILh53ELh51ELh52ELh4EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     92e:	ac 9a       	sbi	0x15, 4	; 21
     930:	08 95       	ret

00000932 <_ZN4PinSILh53ELh51ELh52ELh4EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     932:	95 b3       	in	r25, 0x15	; 21
     934:	80 e1       	ldi	r24, 0x10	; 16
     936:	89 27       	eor	r24, r25
     938:	85 bb       	out	0x15, r24	; 21
     93a:	08 95       	ret

0000093c <_ZN4PinSILh53ELh51ELh52ELh4EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     93c:	a4 9a       	sbi	0x14, 4	; 20
     93e:	08 95       	ret

00000940 <_ZN4PinSILh53ELh51ELh52ELh4EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     940:	a4 98       	cbi	0x14, 4	; 20
     942:	08 95       	ret

00000944 <_ZN4PinSILh53ELh51ELh52ELh5EE9FastClearEv>:
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     944:	ad 98       	cbi	0x15, 5	; 21
     946:	08 95       	ret

00000948 <_ZN4PinSILh53ELh51ELh52ELh5EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     948:	95 b3       	in	r25, 0x15	; 21
     94a:	80 e2       	ldi	r24, 0x20	; 32
     94c:	89 27       	eor	r24, r25
     94e:	85 bb       	out	0x15, r24	; 21
     950:	08 95       	ret

00000952 <_ZN4PinSILh53ELh51ELh52ELh5EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     952:	a5 9a       	sbi	0x14, 5	; 20
     954:	08 95       	ret

00000956 <_ZN4PinSILh53ELh51ELh52ELh5EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     956:	a5 98       	cbi	0x14, 5	; 20
     958:	08 95       	ret

0000095a <_ZN4PinSILh53ELh51ELh52ELh5EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     95a:	66 23       	and	r22, r22
     95c:	41 f0       	breq	.+16     	; 0x96e <_ZN4PinSILh53ELh51ELh52ELh5EE7BoolSetEb+0x14>
			Set();
     95e:	dc 01       	movw	r26, r24
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
     964:	06 84       	ldd	r0, Z+14	; 0x0e
     966:	f7 85       	ldd	r31, Z+15	; 0x0f
     968:	e0 2d       	mov	r30, r0
     96a:	09 95       	icall
     96c:	08 95       	ret
		else
			Clear();
     96e:	dc 01       	movw	r26, r24
     970:	ed 91       	ld	r30, X+
     972:	fc 91       	ld	r31, X
     974:	00 88       	ldd	r0, Z+16	; 0x10
     976:	f1 89       	ldd	r31, Z+17	; 0x11
     978:	e0 2d       	mov	r30, r0
     97a:	09 95       	icall
     97c:	08 95       	ret

0000097e <_ZN4PinSILh53ELh51ELh52ELh5EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     97e:	83 b3       	in	r24, 0x13	; 19
    }
     980:	85 fb       	bst	r24, 5
     982:	88 27       	eor	r24, r24
     984:	80 f9       	bld	r24, 0
     986:	08 95       	ret

00000988 <_ZN4PinSILh53ELh51ELh52ELh5EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     988:	ad 9a       	sbi	0x15, 5	; 21
     98a:	08 95       	ret

0000098c <_ZN4PinSILh53ELh51ELh52ELh5EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     98c:	95 b3       	in	r25, 0x15	; 21
     98e:	80 e2       	ldi	r24, 0x20	; 32
     990:	89 27       	eor	r24, r25
     992:	85 bb       	out	0x15, r24	; 21
     994:	08 95       	ret

00000996 <_ZN4PinSILh53ELh51ELh52ELh5EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     996:	a5 9a       	sbi	0x14, 5	; 20
     998:	08 95       	ret

0000099a <_ZN4PinSILh53ELh51ELh52ELh5EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     99a:	a5 98       	cbi	0x14, 5	; 20
     99c:	08 95       	ret

0000099e <_ZN4PinSILh53ELh51ELh52ELh6EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     99e:	ae 9a       	sbi	0x15, 6	; 21
     9a0:	08 95       	ret

000009a2 <_ZN4PinSILh53ELh51ELh52ELh6EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     9a2:	ae 98       	cbi	0x15, 6	; 21
     9a4:	08 95       	ret

000009a6 <_ZN4PinSILh53ELh51ELh52ELh6EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     9a6:	95 b3       	in	r25, 0x15	; 21
     9a8:	80 e4       	ldi	r24, 0x40	; 64
     9aa:	89 27       	eor	r24, r25
     9ac:	85 bb       	out	0x15, r24	; 21
     9ae:	08 95       	ret

000009b0 <_ZN4PinSILh53ELh51ELh52ELh6EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     9b0:	a6 9a       	sbi	0x14, 6	; 20
     9b2:	08 95       	ret

000009b4 <_ZN4PinSILh53ELh51ELh52ELh6EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     9b4:	a6 98       	cbi	0x14, 6	; 20
     9b6:	08 95       	ret

000009b8 <_ZN4PinSILh53ELh51ELh52ELh6EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     9b8:	66 23       	and	r22, r22
     9ba:	41 f0       	breq	.+16     	; 0x9cc <_ZN4PinSILh53ELh51ELh52ELh6EE7BoolSetEb+0x14>
			Set();
     9bc:	dc 01       	movw	r26, r24
     9be:	ed 91       	ld	r30, X+
     9c0:	fc 91       	ld	r31, X
     9c2:	06 84       	ldd	r0, Z+14	; 0x0e
     9c4:	f7 85       	ldd	r31, Z+15	; 0x0f
     9c6:	e0 2d       	mov	r30, r0
     9c8:	09 95       	icall
     9ca:	08 95       	ret
		else
			Clear();
     9cc:	dc 01       	movw	r26, r24
     9ce:	ed 91       	ld	r30, X+
     9d0:	fc 91       	ld	r31, X
     9d2:	00 88       	ldd	r0, Z+16	; 0x10
     9d4:	f1 89       	ldd	r31, Z+17	; 0x11
     9d6:	e0 2d       	mov	r30, r0
     9d8:	09 95       	icall
     9da:	08 95       	ret

000009dc <_ZN4PinSILh53ELh51ELh52ELh6EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     9dc:	83 b3       	in	r24, 0x13	; 19
    }
     9de:	86 fb       	bst	r24, 6
     9e0:	88 27       	eor	r24, r24
     9e2:	80 f9       	bld	r24, 0
     9e4:	08 95       	ret

000009e6 <_ZN4PinSILh53ELh51ELh52ELh6EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     9e6:	95 b3       	in	r25, 0x15	; 21
     9e8:	80 e4       	ldi	r24, 0x40	; 64
     9ea:	89 27       	eor	r24, r25
     9ec:	85 bb       	out	0x15, r24	; 21
     9ee:	08 95       	ret

000009f0 <_ZN4PinSILh53ELh51ELh52ELh6EE7AsInputEv>:
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     9f0:	a6 98       	cbi	0x14, 6	; 20
     9f2:	08 95       	ret

000009f4 <_ZN4PinSILh53ELh51ELh52ELh7EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     9f4:	af 9a       	sbi	0x15, 7	; 21
     9f6:	08 95       	ret

000009f8 <_ZN4PinSILh53ELh51ELh52ELh7EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     9f8:	af 98       	cbi	0x15, 7	; 21
     9fa:	08 95       	ret

000009fc <_ZN4PinSILh53ELh51ELh52ELh7EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     9fc:	85 b3       	in	r24, 0x15	; 21
     9fe:	80 58       	subi	r24, 0x80	; 128
     a00:	85 bb       	out	0x15, r24	; 21
     a02:	08 95       	ret

00000a04 <_ZN4PinSILh53ELh51ELh52ELh7EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     a04:	a7 9a       	sbi	0x14, 7	; 20
     a06:	08 95       	ret

00000a08 <_ZN4PinSILh53ELh51ELh52ELh7EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     a08:	a7 98       	cbi	0x14, 7	; 20
     a0a:	08 95       	ret

00000a0c <_ZN4PinSILh53ELh51ELh52ELh7EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     a0c:	66 23       	and	r22, r22
     a0e:	41 f0       	breq	.+16     	; 0xa20 <_ZN4PinSILh53ELh51ELh52ELh7EE7BoolSetEb+0x14>
			Set();
     a10:	dc 01       	movw	r26, r24
     a12:	ed 91       	ld	r30, X+
     a14:	fc 91       	ld	r31, X
     a16:	06 84       	ldd	r0, Z+14	; 0x0e
     a18:	f7 85       	ldd	r31, Z+15	; 0x0f
     a1a:	e0 2d       	mov	r30, r0
     a1c:	09 95       	icall
     a1e:	08 95       	ret
		else
			Clear();
     a20:	dc 01       	movw	r26, r24
     a22:	ed 91       	ld	r30, X+
     a24:	fc 91       	ld	r31, X
     a26:	00 88       	ldd	r0, Z+16	; 0x10
     a28:	f1 89       	ldd	r31, Z+17	; 0x11
     a2a:	e0 2d       	mov	r30, r0
     a2c:	09 95       	icall
     a2e:	08 95       	ret

00000a30 <_ZN4PinSILh53ELh51ELh52ELh7EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	9f 9b       	sbis	0x13, 7	; 19
     a34:	80 e0       	ldi	r24, 0x00	; 0
    }
     a36:	08 95       	ret

00000a38 <_ZN4PinSILh53ELh51ELh52ELh7EE6ToggleEv>:
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     a38:	85 b3       	in	r24, 0x15	; 21
     a3a:	80 58       	subi	r24, 0x80	; 128
     a3c:	85 bb       	out	0x15, r24	; 21
     a3e:	08 95       	ret

00000a40 <_ZN4PinSILh53ELh51ELh52ELh7EE7AsInputEv>:
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     a40:	a7 98       	cbi	0x14, 7	; 20
     a42:	08 95       	ret

00000a44 <_ZN4PinSILh56ELh54ELh55ELh7EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     a44:	c7 9a       	sbi	0x18, 7	; 24
     a46:	08 95       	ret

00000a48 <_ZN4PinSILh56ELh54ELh55ELh7EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     a48:	c7 98       	cbi	0x18, 7	; 24
     a4a:	08 95       	ret

00000a4c <_ZN4PinSILh56ELh54ELh55ELh7EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     a4c:	88 b3       	in	r24, 0x18	; 24
     a4e:	80 58       	subi	r24, 0x80	; 128
     a50:	88 bb       	out	0x18, r24	; 24
     a52:	08 95       	ret

00000a54 <_ZN4PinSILh56ELh54ELh55ELh7EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     a54:	bf 9a       	sbi	0x17, 7	; 23
     a56:	08 95       	ret

00000a58 <_ZN4PinSILh56ELh54ELh55ELh7EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     a58:	bf 98       	cbi	0x17, 7	; 23
     a5a:	08 95       	ret

00000a5c <_ZN4PinSILh56ELh54ELh55ELh7EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     a5c:	66 23       	and	r22, r22
     a5e:	41 f0       	breq	.+16     	; 0xa70 <_ZN4PinSILh56ELh54ELh55ELh7EE7BoolSetEb+0x14>
			Set();
     a60:	dc 01       	movw	r26, r24
     a62:	ed 91       	ld	r30, X+
     a64:	fc 91       	ld	r31, X
     a66:	06 84       	ldd	r0, Z+14	; 0x0e
     a68:	f7 85       	ldd	r31, Z+15	; 0x0f
     a6a:	e0 2d       	mov	r30, r0
     a6c:	09 95       	icall
     a6e:	08 95       	ret
		else
			Clear();
     a70:	dc 01       	movw	r26, r24
     a72:	ed 91       	ld	r30, X+
     a74:	fc 91       	ld	r31, X
     a76:	00 88       	ldd	r0, Z+16	; 0x10
     a78:	f1 89       	ldd	r31, Z+17	; 0x11
     a7a:	e0 2d       	mov	r30, r0
     a7c:	09 95       	icall
     a7e:	08 95       	ret

00000a80 <_ZN4PinSILh56ELh54ELh55ELh7EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	b7 9b       	sbis	0x16, 7	; 22
     a84:	80 e0       	ldi	r24, 0x00	; 0
    }
     a86:	08 95       	ret

00000a88 <_ZN4PinSILh56ELh54ELh55ELh7EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     a88:	c7 9a       	sbi	0x18, 7	; 24
     a8a:	08 95       	ret

00000a8c <_ZN4PinSILh56ELh54ELh55ELh7EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     a8c:	c7 98       	cbi	0x18, 7	; 24
     a8e:	08 95       	ret

00000a90 <_ZN4PinSILh56ELh54ELh55ELh7EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     a90:	88 b3       	in	r24, 0x18	; 24
     a92:	80 58       	subi	r24, 0x80	; 128
     a94:	88 bb       	out	0x18, r24	; 24
     a96:	08 95       	ret

00000a98 <_ZN4PinSILh56ELh54ELh55ELh7EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     a98:	bf 9a       	sbi	0x17, 7	; 23
     a9a:	08 95       	ret

00000a9c <_ZN4PinSILh56ELh54ELh55ELh7EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     a9c:	bf 98       	cbi	0x17, 7	; 23
     a9e:	08 95       	ret

00000aa0 <_ZN4PinSILh56ELh54ELh55ELh6EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     aa0:	c6 9a       	sbi	0x18, 6	; 24
     aa2:	08 95       	ret

00000aa4 <_ZN4PinSILh56ELh54ELh55ELh6EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     aa4:	c6 98       	cbi	0x18, 6	; 24
     aa6:	08 95       	ret

00000aa8 <_ZN4PinSILh56ELh54ELh55ELh6EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     aa8:	98 b3       	in	r25, 0x18	; 24
     aaa:	80 e4       	ldi	r24, 0x40	; 64
     aac:	89 27       	eor	r24, r25
     aae:	88 bb       	out	0x18, r24	; 24
     ab0:	08 95       	ret

00000ab2 <_ZN4PinSILh56ELh54ELh55ELh6EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     ab2:	be 9a       	sbi	0x17, 6	; 23
     ab4:	08 95       	ret

00000ab6 <_ZN4PinSILh56ELh54ELh55ELh6EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     ab6:	be 98       	cbi	0x17, 6	; 23
     ab8:	08 95       	ret

00000aba <_ZN4PinSILh56ELh54ELh55ELh6EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     aba:	66 23       	and	r22, r22
     abc:	41 f0       	breq	.+16     	; 0xace <_ZN4PinSILh56ELh54ELh55ELh6EE7BoolSetEb+0x14>
			Set();
     abe:	dc 01       	movw	r26, r24
     ac0:	ed 91       	ld	r30, X+
     ac2:	fc 91       	ld	r31, X
     ac4:	06 84       	ldd	r0, Z+14	; 0x0e
     ac6:	f7 85       	ldd	r31, Z+15	; 0x0f
     ac8:	e0 2d       	mov	r30, r0
     aca:	09 95       	icall
     acc:	08 95       	ret
		else
			Clear();
     ace:	dc 01       	movw	r26, r24
     ad0:	ed 91       	ld	r30, X+
     ad2:	fc 91       	ld	r31, X
     ad4:	00 88       	ldd	r0, Z+16	; 0x10
     ad6:	f1 89       	ldd	r31, Z+17	; 0x11
     ad8:	e0 2d       	mov	r30, r0
     ada:	09 95       	icall
     adc:	08 95       	ret

00000ade <_ZN4PinSILh56ELh54ELh55ELh6EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     ade:	86 b3       	in	r24, 0x16	; 22
    }
     ae0:	86 fb       	bst	r24, 6
     ae2:	88 27       	eor	r24, r24
     ae4:	80 f9       	bld	r24, 0
     ae6:	08 95       	ret

00000ae8 <_ZN4PinSILh56ELh54ELh55ELh6EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     ae8:	c6 9a       	sbi	0x18, 6	; 24
     aea:	08 95       	ret

00000aec <_ZN4PinSILh56ELh54ELh55ELh6EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     aec:	c6 98       	cbi	0x18, 6	; 24
     aee:	08 95       	ret

00000af0 <_ZN4PinSILh56ELh54ELh55ELh6EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     af0:	98 b3       	in	r25, 0x18	; 24
     af2:	80 e4       	ldi	r24, 0x40	; 64
     af4:	89 27       	eor	r24, r25
     af6:	88 bb       	out	0x18, r24	; 24
     af8:	08 95       	ret

00000afa <_ZN4PinSILh56ELh54ELh55ELh6EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     afa:	be 9a       	sbi	0x17, 6	; 23
     afc:	08 95       	ret

00000afe <_ZN4PinSILh56ELh54ELh55ELh6EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     afe:	be 98       	cbi	0x17, 6	; 23
     b00:	08 95       	ret

00000b02 <_ZN4PinSILh56ELh54ELh55ELh5EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     b02:	c5 9a       	sbi	0x18, 5	; 24
     b04:	08 95       	ret

00000b06 <_ZN4PinSILh56ELh54ELh55ELh5EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     b06:	c5 98       	cbi	0x18, 5	; 24
     b08:	08 95       	ret

00000b0a <_ZN4PinSILh56ELh54ELh55ELh5EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     b0a:	98 b3       	in	r25, 0x18	; 24
     b0c:	80 e2       	ldi	r24, 0x20	; 32
     b0e:	89 27       	eor	r24, r25
     b10:	88 bb       	out	0x18, r24	; 24
     b12:	08 95       	ret

00000b14 <_ZN4PinSILh56ELh54ELh55ELh5EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     b14:	bd 9a       	sbi	0x17, 5	; 23
     b16:	08 95       	ret

00000b18 <_ZN4PinSILh56ELh54ELh55ELh5EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     b18:	bd 98       	cbi	0x17, 5	; 23
     b1a:	08 95       	ret

00000b1c <_ZN4PinSILh56ELh54ELh55ELh5EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     b1c:	66 23       	and	r22, r22
     b1e:	41 f0       	breq	.+16     	; 0xb30 <_ZN4PinSILh56ELh54ELh55ELh5EE7BoolSetEb+0x14>
			Set();
     b20:	dc 01       	movw	r26, r24
     b22:	ed 91       	ld	r30, X+
     b24:	fc 91       	ld	r31, X
     b26:	06 84       	ldd	r0, Z+14	; 0x0e
     b28:	f7 85       	ldd	r31, Z+15	; 0x0f
     b2a:	e0 2d       	mov	r30, r0
     b2c:	09 95       	icall
     b2e:	08 95       	ret
		else
			Clear();
     b30:	dc 01       	movw	r26, r24
     b32:	ed 91       	ld	r30, X+
     b34:	fc 91       	ld	r31, X
     b36:	00 88       	ldd	r0, Z+16	; 0x10
     b38:	f1 89       	ldd	r31, Z+17	; 0x11
     b3a:	e0 2d       	mov	r30, r0
     b3c:	09 95       	icall
     b3e:	08 95       	ret

00000b40 <_ZN4PinSILh56ELh54ELh55ELh5EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     b40:	86 b3       	in	r24, 0x16	; 22
    }
     b42:	85 fb       	bst	r24, 5
     b44:	88 27       	eor	r24, r24
     b46:	80 f9       	bld	r24, 0
     b48:	08 95       	ret

00000b4a <_ZN4PinSILh56ELh54ELh55ELh5EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     b4a:	c5 9a       	sbi	0x18, 5	; 24
     b4c:	08 95       	ret

00000b4e <_ZN4PinSILh56ELh54ELh55ELh5EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     b4e:	c5 98       	cbi	0x18, 5	; 24
     b50:	08 95       	ret

00000b52 <_ZN4PinSILh56ELh54ELh55ELh5EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     b52:	98 b3       	in	r25, 0x18	; 24
     b54:	80 e2       	ldi	r24, 0x20	; 32
     b56:	89 27       	eor	r24, r25
     b58:	88 bb       	out	0x18, r24	; 24
     b5a:	08 95       	ret

00000b5c <_ZN4PinSILh56ELh54ELh55ELh5EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     b5c:	bd 9a       	sbi	0x17, 5	; 23
     b5e:	08 95       	ret

00000b60 <_ZN4PinSILh56ELh54ELh55ELh5EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     b60:	bd 98       	cbi	0x17, 5	; 23
     b62:	08 95       	ret

00000b64 <_ZN4PinSILh56ELh54ELh55ELh4EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     b64:	c4 9a       	sbi	0x18, 4	; 24
     b66:	08 95       	ret

00000b68 <_ZN4PinSILh56ELh54ELh55ELh4EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     b68:	c4 98       	cbi	0x18, 4	; 24
     b6a:	08 95       	ret

00000b6c <_ZN4PinSILh56ELh54ELh55ELh4EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     b6c:	98 b3       	in	r25, 0x18	; 24
     b6e:	80 e1       	ldi	r24, 0x10	; 16
     b70:	89 27       	eor	r24, r25
     b72:	88 bb       	out	0x18, r24	; 24
     b74:	08 95       	ret

00000b76 <_ZN4PinSILh56ELh54ELh55ELh4EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     b76:	bc 9a       	sbi	0x17, 4	; 23
     b78:	08 95       	ret

00000b7a <_ZN4PinSILh56ELh54ELh55ELh4EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     b7a:	bc 98       	cbi	0x17, 4	; 23
     b7c:	08 95       	ret

00000b7e <_ZN4PinSILh56ELh54ELh55ELh4EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     b7e:	66 23       	and	r22, r22
     b80:	41 f0       	breq	.+16     	; 0xb92 <_ZN4PinSILh56ELh54ELh55ELh4EE7BoolSetEb+0x14>
			Set();
     b82:	dc 01       	movw	r26, r24
     b84:	ed 91       	ld	r30, X+
     b86:	fc 91       	ld	r31, X
     b88:	06 84       	ldd	r0, Z+14	; 0x0e
     b8a:	f7 85       	ldd	r31, Z+15	; 0x0f
     b8c:	e0 2d       	mov	r30, r0
     b8e:	09 95       	icall
     b90:	08 95       	ret
		else
			Clear();
     b92:	dc 01       	movw	r26, r24
     b94:	ed 91       	ld	r30, X+
     b96:	fc 91       	ld	r31, X
     b98:	00 88       	ldd	r0, Z+16	; 0x10
     b9a:	f1 89       	ldd	r31, Z+17	; 0x11
     b9c:	e0 2d       	mov	r30, r0
     b9e:	09 95       	icall
     ba0:	08 95       	ret

00000ba2 <_ZN4PinSILh56ELh54ELh55ELh4EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     ba2:	86 b3       	in	r24, 0x16	; 22
    }
     ba4:	82 95       	swap	r24
     ba6:	81 70       	andi	r24, 0x01	; 1
     ba8:	08 95       	ret

00000baa <_ZN4PinSILh56ELh54ELh55ELh4EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     baa:	c4 9a       	sbi	0x18, 4	; 24
     bac:	08 95       	ret

00000bae <_ZN4PinSILh56ELh54ELh55ELh4EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     bae:	c4 98       	cbi	0x18, 4	; 24
     bb0:	08 95       	ret

00000bb2 <_ZN4PinSILh56ELh54ELh55ELh4EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     bb2:	98 b3       	in	r25, 0x18	; 24
     bb4:	80 e1       	ldi	r24, 0x10	; 16
     bb6:	89 27       	eor	r24, r25
     bb8:	88 bb       	out	0x18, r24	; 24
     bba:	08 95       	ret

00000bbc <_ZN4PinSILh56ELh54ELh55ELh4EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     bbc:	bc 9a       	sbi	0x17, 4	; 23
     bbe:	08 95       	ret

00000bc0 <_ZN4PinSILh56ELh54ELh55ELh4EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     bc0:	bc 98       	cbi	0x17, 4	; 23
     bc2:	08 95       	ret

00000bc4 <_ZN4PinSILh56ELh54ELh55ELh3EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     bc4:	c3 9a       	sbi	0x18, 3	; 24
     bc6:	08 95       	ret

00000bc8 <_ZN4PinSILh56ELh54ELh55ELh3EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     bc8:	c3 98       	cbi	0x18, 3	; 24
     bca:	08 95       	ret

00000bcc <_ZN4PinSILh56ELh54ELh55ELh3EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     bcc:	98 b3       	in	r25, 0x18	; 24
     bce:	88 e0       	ldi	r24, 0x08	; 8
     bd0:	89 27       	eor	r24, r25
     bd2:	88 bb       	out	0x18, r24	; 24
     bd4:	08 95       	ret

00000bd6 <_ZN4PinSILh56ELh54ELh55ELh3EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     bd6:	bb 9a       	sbi	0x17, 3	; 23
     bd8:	08 95       	ret

00000bda <_ZN4PinSILh56ELh54ELh55ELh3EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     bda:	bb 98       	cbi	0x17, 3	; 23
     bdc:	08 95       	ret

00000bde <_ZN4PinSILh56ELh54ELh55ELh3EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     bde:	66 23       	and	r22, r22
     be0:	41 f0       	breq	.+16     	; 0xbf2 <_ZN4PinSILh56ELh54ELh55ELh3EE7BoolSetEb+0x14>
			Set();
     be2:	dc 01       	movw	r26, r24
     be4:	ed 91       	ld	r30, X+
     be6:	fc 91       	ld	r31, X
     be8:	06 84       	ldd	r0, Z+14	; 0x0e
     bea:	f7 85       	ldd	r31, Z+15	; 0x0f
     bec:	e0 2d       	mov	r30, r0
     bee:	09 95       	icall
     bf0:	08 95       	ret
		else
			Clear();
     bf2:	dc 01       	movw	r26, r24
     bf4:	ed 91       	ld	r30, X+
     bf6:	fc 91       	ld	r31, X
     bf8:	00 88       	ldd	r0, Z+16	; 0x10
     bfa:	f1 89       	ldd	r31, Z+17	; 0x11
     bfc:	e0 2d       	mov	r30, r0
     bfe:	09 95       	icall
     c00:	08 95       	ret

00000c02 <_ZN4PinSILh56ELh54ELh55ELh3EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     c02:	86 b3       	in	r24, 0x16	; 22
    }
     c04:	83 fb       	bst	r24, 3
     c06:	88 27       	eor	r24, r24
     c08:	80 f9       	bld	r24, 0
     c0a:	08 95       	ret

00000c0c <_ZN4PinSILh56ELh54ELh55ELh3EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     c0c:	c3 9a       	sbi	0x18, 3	; 24
     c0e:	08 95       	ret

00000c10 <_ZN4PinSILh56ELh54ELh55ELh3EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     c10:	c3 98       	cbi	0x18, 3	; 24
     c12:	08 95       	ret

00000c14 <_ZN4PinSILh56ELh54ELh55ELh3EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     c14:	98 b3       	in	r25, 0x18	; 24
     c16:	88 e0       	ldi	r24, 0x08	; 8
     c18:	89 27       	eor	r24, r25
     c1a:	88 bb       	out	0x18, r24	; 24
     c1c:	08 95       	ret

00000c1e <_ZN4PinSILh56ELh54ELh55ELh3EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     c1e:	bb 9a       	sbi	0x17, 3	; 23
     c20:	08 95       	ret

00000c22 <_ZN4PinSILh56ELh54ELh55ELh3EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     c22:	bb 98       	cbi	0x17, 3	; 23
     c24:	08 95       	ret

00000c26 <_ZN4PinSILh56ELh54ELh55ELh2EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     c26:	c2 9a       	sbi	0x18, 2	; 24
     c28:	08 95       	ret

00000c2a <_ZN4PinSILh56ELh54ELh55ELh2EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     c2a:	c2 98       	cbi	0x18, 2	; 24
     c2c:	08 95       	ret

00000c2e <_ZN4PinSILh56ELh54ELh55ELh2EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     c2e:	98 b3       	in	r25, 0x18	; 24
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	89 27       	eor	r24, r25
     c34:	88 bb       	out	0x18, r24	; 24
     c36:	08 95       	ret

00000c38 <_ZN4PinSILh56ELh54ELh55ELh2EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     c38:	ba 9a       	sbi	0x17, 2	; 23
     c3a:	08 95       	ret

00000c3c <_ZN4PinSILh56ELh54ELh55ELh2EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     c3c:	ba 98       	cbi	0x17, 2	; 23
     c3e:	08 95       	ret

00000c40 <_ZN4PinSILh56ELh54ELh55ELh2EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     c40:	66 23       	and	r22, r22
     c42:	41 f0       	breq	.+16     	; 0xc54 <_ZN4PinSILh56ELh54ELh55ELh2EE7BoolSetEb+0x14>
			Set();
     c44:	dc 01       	movw	r26, r24
     c46:	ed 91       	ld	r30, X+
     c48:	fc 91       	ld	r31, X
     c4a:	06 84       	ldd	r0, Z+14	; 0x0e
     c4c:	f7 85       	ldd	r31, Z+15	; 0x0f
     c4e:	e0 2d       	mov	r30, r0
     c50:	09 95       	icall
     c52:	08 95       	ret
		else
			Clear();
     c54:	dc 01       	movw	r26, r24
     c56:	ed 91       	ld	r30, X+
     c58:	fc 91       	ld	r31, X
     c5a:	00 88       	ldd	r0, Z+16	; 0x10
     c5c:	f1 89       	ldd	r31, Z+17	; 0x11
     c5e:	e0 2d       	mov	r30, r0
     c60:	09 95       	icall
     c62:	08 95       	ret

00000c64 <_ZN4PinSILh56ELh54ELh55ELh2EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     c64:	86 b3       	in	r24, 0x16	; 22
    }
     c66:	82 fb       	bst	r24, 2
     c68:	88 27       	eor	r24, r24
     c6a:	80 f9       	bld	r24, 0
     c6c:	08 95       	ret

00000c6e <_ZN4PinSILh56ELh54ELh55ELh2EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     c6e:	c2 9a       	sbi	0x18, 2	; 24
     c70:	08 95       	ret

00000c72 <_ZN4PinSILh56ELh54ELh55ELh2EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     c72:	c2 98       	cbi	0x18, 2	; 24
     c74:	08 95       	ret

00000c76 <_ZN4PinSILh56ELh54ELh55ELh2EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     c76:	98 b3       	in	r25, 0x18	; 24
     c78:	84 e0       	ldi	r24, 0x04	; 4
     c7a:	89 27       	eor	r24, r25
     c7c:	88 bb       	out	0x18, r24	; 24
     c7e:	08 95       	ret

00000c80 <_ZN4PinSILh56ELh54ELh55ELh2EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     c80:	ba 9a       	sbi	0x17, 2	; 23
     c82:	08 95       	ret

00000c84 <_ZN4PinSILh56ELh54ELh55ELh2EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     c84:	ba 98       	cbi	0x17, 2	; 23
     c86:	08 95       	ret

00000c88 <_ZN4PinSILh56ELh54ELh55ELh1EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     c88:	c1 9a       	sbi	0x18, 1	; 24
     c8a:	08 95       	ret

00000c8c <_ZN4PinSILh56ELh54ELh55ELh1EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     c8c:	c1 98       	cbi	0x18, 1	; 24
     c8e:	08 95       	ret

00000c90 <_ZN4PinSILh56ELh54ELh55ELh1EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     c90:	98 b3       	in	r25, 0x18	; 24
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	89 27       	eor	r24, r25
     c96:	88 bb       	out	0x18, r24	; 24
     c98:	08 95       	ret

00000c9a <_ZN4PinSILh56ELh54ELh55ELh1EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     c9a:	b9 9a       	sbi	0x17, 1	; 23
     c9c:	08 95       	ret

00000c9e <_ZN4PinSILh56ELh54ELh55ELh1EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     c9e:	b9 98       	cbi	0x17, 1	; 23
     ca0:	08 95       	ret

00000ca2 <_ZN4PinSILh56ELh54ELh55ELh1EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     ca2:	66 23       	and	r22, r22
     ca4:	41 f0       	breq	.+16     	; 0xcb6 <_ZN4PinSILh56ELh54ELh55ELh1EE7BoolSetEb+0x14>
			Set();
     ca6:	dc 01       	movw	r26, r24
     ca8:	ed 91       	ld	r30, X+
     caa:	fc 91       	ld	r31, X
     cac:	06 84       	ldd	r0, Z+14	; 0x0e
     cae:	f7 85       	ldd	r31, Z+15	; 0x0f
     cb0:	e0 2d       	mov	r30, r0
     cb2:	09 95       	icall
     cb4:	08 95       	ret
		else
			Clear();
     cb6:	dc 01       	movw	r26, r24
     cb8:	ed 91       	ld	r30, X+
     cba:	fc 91       	ld	r31, X
     cbc:	00 88       	ldd	r0, Z+16	; 0x10
     cbe:	f1 89       	ldd	r31, Z+17	; 0x11
     cc0:	e0 2d       	mov	r30, r0
     cc2:	09 95       	icall
     cc4:	08 95       	ret

00000cc6 <_ZN4PinSILh56ELh54ELh55ELh1EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     cc6:	86 b3       	in	r24, 0x16	; 22
    }
     cc8:	86 95       	lsr	r24
     cca:	81 70       	andi	r24, 0x01	; 1
     ccc:	08 95       	ret

00000cce <_ZN4PinSILh56ELh54ELh55ELh1EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     cce:	c1 9a       	sbi	0x18, 1	; 24
     cd0:	08 95       	ret

00000cd2 <_ZN4PinSILh56ELh54ELh55ELh1EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     cd2:	c1 98       	cbi	0x18, 1	; 24
     cd4:	08 95       	ret

00000cd6 <_ZN4PinSILh56ELh54ELh55ELh1EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     cd6:	98 b3       	in	r25, 0x18	; 24
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	89 27       	eor	r24, r25
     cdc:	88 bb       	out	0x18, r24	; 24
     cde:	08 95       	ret

00000ce0 <_ZN4PinSILh56ELh54ELh55ELh1EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     ce0:	b9 9a       	sbi	0x17, 1	; 23
     ce2:	08 95       	ret

00000ce4 <_ZN4PinSILh56ELh54ELh55ELh1EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     ce4:	b9 98       	cbi	0x17, 1	; 23
     ce6:	08 95       	ret

00000ce8 <_ZN4PinSILh56ELh54ELh55ELh0EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     ce8:	c0 9a       	sbi	0x18, 0	; 24
     cea:	08 95       	ret

00000cec <_ZN4PinSILh56ELh54ELh55ELh0EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     cec:	c0 98       	cbi	0x18, 0	; 24
     cee:	08 95       	ret

00000cf0 <_ZN4PinSILh56ELh54ELh55ELh0EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     cf0:	98 b3       	in	r25, 0x18	; 24
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	89 27       	eor	r24, r25
     cf6:	88 bb       	out	0x18, r24	; 24
     cf8:	08 95       	ret

00000cfa <_ZN4PinSILh56ELh54ELh55ELh0EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     cfa:	b8 9a       	sbi	0x17, 0	; 23
     cfc:	08 95       	ret

00000cfe <_ZN4PinSILh56ELh54ELh55ELh0EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     cfe:	b8 98       	cbi	0x17, 0	; 23
     d00:	08 95       	ret

00000d02 <_ZN4PinSILh56ELh54ELh55ELh0EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     d02:	66 23       	and	r22, r22
     d04:	41 f0       	breq	.+16     	; 0xd16 <_ZN4PinSILh56ELh54ELh55ELh0EE7BoolSetEb+0x14>
			Set();
     d06:	dc 01       	movw	r26, r24
     d08:	ed 91       	ld	r30, X+
     d0a:	fc 91       	ld	r31, X
     d0c:	06 84       	ldd	r0, Z+14	; 0x0e
     d0e:	f7 85       	ldd	r31, Z+15	; 0x0f
     d10:	e0 2d       	mov	r30, r0
     d12:	09 95       	icall
     d14:	08 95       	ret
		else
			Clear();
     d16:	dc 01       	movw	r26, r24
     d18:	ed 91       	ld	r30, X+
     d1a:	fc 91       	ld	r31, X
     d1c:	00 88       	ldd	r0, Z+16	; 0x10
     d1e:	f1 89       	ldd	r31, Z+17	; 0x11
     d20:	e0 2d       	mov	r30, r0
     d22:	09 95       	icall
     d24:	08 95       	ret

00000d26 <_ZN4PinSILh56ELh54ELh55ELh0EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     d26:	86 b3       	in	r24, 0x16	; 22
    }
     d28:	81 70       	andi	r24, 0x01	; 1
     d2a:	08 95       	ret

00000d2c <_ZN4PinSILh56ELh54ELh55ELh0EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     d2c:	c0 9a       	sbi	0x18, 0	; 24
     d2e:	08 95       	ret

00000d30 <_ZN4PinSILh56ELh54ELh55ELh0EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     d30:	c0 98       	cbi	0x18, 0	; 24
     d32:	08 95       	ret

00000d34 <_ZN4PinSILh56ELh54ELh55ELh0EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     d34:	98 b3       	in	r25, 0x18	; 24
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	89 27       	eor	r24, r25
     d3a:	88 bb       	out	0x18, r24	; 24
     d3c:	08 95       	ret

00000d3e <_ZN4PinSILh56ELh54ELh55ELh0EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     d3e:	b8 9a       	sbi	0x17, 0	; 23
     d40:	08 95       	ret

00000d42 <_ZN4PinSILh56ELh54ELh55ELh0EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     d42:	b8 98       	cbi	0x17, 0	; 23
     d44:	08 95       	ret

00000d46 <_ZN4PinSILh59ELh57ELh58ELh2EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     d46:	da 9a       	sbi	0x1b, 2	; 27
     d48:	08 95       	ret

00000d4a <_ZN4PinSILh59ELh57ELh58ELh2EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     d4a:	da 98       	cbi	0x1b, 2	; 27
     d4c:	08 95       	ret

00000d4e <_ZN4PinSILh59ELh57ELh58ELh2EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     d4e:	9b b3       	in	r25, 0x1b	; 27
     d50:	84 e0       	ldi	r24, 0x04	; 4
     d52:	89 27       	eor	r24, r25
     d54:	8b bb       	out	0x1b, r24	; 27
     d56:	08 95       	ret

00000d58 <_ZN4PinSILh59ELh57ELh58ELh2EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     d58:	d2 9a       	sbi	0x1a, 2	; 26
     d5a:	08 95       	ret

00000d5c <_ZN4PinSILh59ELh57ELh58ELh2EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     d5c:	d2 98       	cbi	0x1a, 2	; 26
     d5e:	08 95       	ret

00000d60 <_ZN4PinSILh59ELh57ELh58ELh2EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     d60:	66 23       	and	r22, r22
     d62:	41 f0       	breq	.+16     	; 0xd74 <_ZN4PinSILh59ELh57ELh58ELh2EE7BoolSetEb+0x14>
			Set();
     d64:	dc 01       	movw	r26, r24
     d66:	ed 91       	ld	r30, X+
     d68:	fc 91       	ld	r31, X
     d6a:	06 84       	ldd	r0, Z+14	; 0x0e
     d6c:	f7 85       	ldd	r31, Z+15	; 0x0f
     d6e:	e0 2d       	mov	r30, r0
     d70:	09 95       	icall
     d72:	08 95       	ret
		else
			Clear();
     d74:	dc 01       	movw	r26, r24
     d76:	ed 91       	ld	r30, X+
     d78:	fc 91       	ld	r31, X
     d7a:	00 88       	ldd	r0, Z+16	; 0x10
     d7c:	f1 89       	ldd	r31, Z+17	; 0x11
     d7e:	e0 2d       	mov	r30, r0
     d80:	09 95       	icall
     d82:	08 95       	ret

00000d84 <_ZN4PinSILh59ELh57ELh58ELh2EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     d84:	89 b3       	in	r24, 0x19	; 25
    }
     d86:	82 fb       	bst	r24, 2
     d88:	88 27       	eor	r24, r24
     d8a:	80 f9       	bld	r24, 0
     d8c:	08 95       	ret

00000d8e <_ZN4PinSILh59ELh57ELh58ELh2EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     d8e:	da 9a       	sbi	0x1b, 2	; 27
     d90:	08 95       	ret

00000d92 <_ZN4PinSILh59ELh57ELh58ELh2EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     d92:	da 98       	cbi	0x1b, 2	; 27
     d94:	08 95       	ret

00000d96 <_ZN4PinSILh59ELh57ELh58ELh2EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     d96:	9b b3       	in	r25, 0x1b	; 27
     d98:	84 e0       	ldi	r24, 0x04	; 4
     d9a:	89 27       	eor	r24, r25
     d9c:	8b bb       	out	0x1b, r24	; 27
     d9e:	08 95       	ret

00000da0 <_ZN4PinSILh59ELh57ELh58ELh2EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     da0:	d2 9a       	sbi	0x1a, 2	; 26
     da2:	08 95       	ret

00000da4 <_ZN4PinSILh59ELh57ELh58ELh2EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     da4:	d2 98       	cbi	0x1a, 2	; 26
     da6:	08 95       	ret

00000da8 <_ZN4PinSILh59ELh57ELh58ELh1EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     da8:	d9 9a       	sbi	0x1b, 1	; 27
     daa:	08 95       	ret

00000dac <_ZN4PinSILh59ELh57ELh58ELh1EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     dac:	d9 98       	cbi	0x1b, 1	; 27
     dae:	08 95       	ret

00000db0 <_ZN4PinSILh59ELh57ELh58ELh1EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     db0:	9b b3       	in	r25, 0x1b	; 27
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	89 27       	eor	r24, r25
     db6:	8b bb       	out	0x1b, r24	; 27
     db8:	08 95       	ret

00000dba <_ZN4PinSILh59ELh57ELh58ELh1EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     dba:	d1 9a       	sbi	0x1a, 1	; 26
     dbc:	08 95       	ret

00000dbe <_ZN4PinSILh59ELh57ELh58ELh1EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     dbe:	d1 98       	cbi	0x1a, 1	; 26
     dc0:	08 95       	ret

00000dc2 <_ZN4PinSILh59ELh57ELh58ELh1EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     dc2:	66 23       	and	r22, r22
     dc4:	41 f0       	breq	.+16     	; 0xdd6 <_ZN4PinSILh59ELh57ELh58ELh1EE7BoolSetEb+0x14>
			Set();
     dc6:	dc 01       	movw	r26, r24
     dc8:	ed 91       	ld	r30, X+
     dca:	fc 91       	ld	r31, X
     dcc:	06 84       	ldd	r0, Z+14	; 0x0e
     dce:	f7 85       	ldd	r31, Z+15	; 0x0f
     dd0:	e0 2d       	mov	r30, r0
     dd2:	09 95       	icall
     dd4:	08 95       	ret
		else
			Clear();
     dd6:	dc 01       	movw	r26, r24
     dd8:	ed 91       	ld	r30, X+
     dda:	fc 91       	ld	r31, X
     ddc:	00 88       	ldd	r0, Z+16	; 0x10
     dde:	f1 89       	ldd	r31, Z+17	; 0x11
     de0:	e0 2d       	mov	r30, r0
     de2:	09 95       	icall
     de4:	08 95       	ret

00000de6 <_ZN4PinSILh59ELh57ELh58ELh1EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     de6:	89 b3       	in	r24, 0x19	; 25
    }
     de8:	86 95       	lsr	r24
     dea:	81 70       	andi	r24, 0x01	; 1
     dec:	08 95       	ret

00000dee <_ZN4PinSILh59ELh57ELh58ELh1EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     dee:	d9 9a       	sbi	0x1b, 1	; 27
     df0:	08 95       	ret

00000df2 <_ZN4PinSILh59ELh57ELh58ELh1EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     df2:	d9 98       	cbi	0x1b, 1	; 27
     df4:	08 95       	ret

00000df6 <_ZN4PinSILh59ELh57ELh58ELh1EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     df6:	9b b3       	in	r25, 0x1b	; 27
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	89 27       	eor	r24, r25
     dfc:	8b bb       	out	0x1b, r24	; 27
     dfe:	08 95       	ret

00000e00 <_ZN4PinSILh59ELh57ELh58ELh1EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     e00:	d1 9a       	sbi	0x1a, 1	; 26
     e02:	08 95       	ret

00000e04 <_ZN4PinSILh59ELh57ELh58ELh1EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     e04:	d1 98       	cbi	0x1a, 1	; 26
     e06:	08 95       	ret

00000e08 <_ZN4PinSILh59ELh57ELh58ELh0EE7FastSetEv>:
 class PinS : public PinSBase
{
public:
void FastSet()
	{
        (*(uint8_t*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm when only 1 set, at other case compiler will make it 3x1 cycles asm instrucions
     e08:	d8 9a       	sbi	0x1b, 0	; 27
     e0a:	08 95       	ret

00000e0c <_ZN4PinSILh59ELh57ELh58ELh0EE9FastClearEv>:
    }

    void FastClear()
    {
        (*(uint8_t*)PortAddress) &= ~(1 << NOPin);
     e0c:	d8 98       	cbi	0x1b, 0	; 27
     e0e:	08 95       	ret

00000e10 <_ZN4PinSILh59ELh57ELh58ELh0EE10FastToggleEv>:
    }

    void FastToggle()
    {
        *(uint8_t*)PortAddress ^= (1 << NOPin);
     e10:	9b b3       	in	r25, 0x1b	; 27
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	89 27       	eor	r24, r25
     e16:	8b bb       	out	0x1b, r24	; 27
     e18:	08 95       	ret

00000e1a <_ZN4PinSILh59ELh57ELh58ELh0EE12FastAsOutputEv>:
    }

    void FastAsOutput()
    {
        *(uint8_t*)DdrAddress |= (1 << NOPin);
     e1a:	d0 9a       	sbi	0x1a, 0	; 26
     e1c:	08 95       	ret

00000e1e <_ZN4PinSILh59ELh57ELh58ELh0EE11FastAsInputEv>:
    }

    void FastAsInput()
    {
        *(uint8_t*)DdrAddress &= ~(1 << NOPin);
     e1e:	d0 98       	cbi	0x1a, 0	; 26
     e20:	08 95       	ret

00000e22 <_ZN4PinSILh59ELh57ELh58ELh0EE7BoolSetEb>:
    }
	void BoolSet(bool value)
	{	
		if (value)
     e22:	66 23       	and	r22, r22
     e24:	41 f0       	breq	.+16     	; 0xe36 <_ZN4PinSILh59ELh57ELh58ELh0EE7BoolSetEb+0x14>
			Set();
     e26:	dc 01       	movw	r26, r24
     e28:	ed 91       	ld	r30, X+
     e2a:	fc 91       	ld	r31, X
     e2c:	06 84       	ldd	r0, Z+14	; 0x0e
     e2e:	f7 85       	ldd	r31, Z+15	; 0x0f
     e30:	e0 2d       	mov	r30, r0
     e32:	09 95       	icall
     e34:	08 95       	ret
		else
			Clear();
     e36:	dc 01       	movw	r26, r24
     e38:	ed 91       	ld	r30, X+
     e3a:	fc 91       	ld	r31, X
     e3c:	00 88       	ldd	r0, Z+16	; 0x10
     e3e:	f1 89       	ldd	r31, Z+17	; 0x11
     e40:	e0 2d       	mov	r30, r0
     e42:	09 95       	icall
     e44:	08 95       	ret

00000e46 <_ZN4PinSILh59ELh57ELh58ELh0EE5CheckEv>:
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
    }

    bool Check()
    {
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
     e46:	89 b3       	in	r24, 0x19	; 25
    }
     e48:	81 70       	andi	r24, 0x01	; 1
     e4a:	08 95       	ret

00000e4c <_ZN4PinSILh59ELh57ELh58ELh0EE3SetEv>:
			Clear();
	}

    void Set()
    {
        (*(uint8_t volatile*)PortAddress) |= (1 << NOPin); //Result is single SBI() in asm (2 cycles)
     e4c:	d8 9a       	sbi	0x1b, 0	; 27
     e4e:	08 95       	ret

00000e50 <_ZN4PinSILh59ELh57ELh58ELh0EE5ClearEv>:
    }

    void Clear()
    {
        (*(uint8_t volatile*)PortAddress) &= ~(1 << NOPin);
     e50:	d8 98       	cbi	0x1b, 0	; 27
     e52:	08 95       	ret

00000e54 <_ZN4PinSILh59ELh57ELh58ELh0EE6ToggleEv>:
    }

    void Toggle()
    {
        (*(uint8_t volatile*)PortAddress) ^= (1 << NOPin);
     e54:	9b b3       	in	r25, 0x1b	; 27
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	89 27       	eor	r24, r25
     e5a:	8b bb       	out	0x1b, r24	; 27
     e5c:	08 95       	ret

00000e5e <_ZN4PinSILh59ELh57ELh58ELh0EE8AsOutputEv>:
        return ((*(uint8_t volatile*)PinAddress >> NOPin) &1);
    }

    void AsOutput()
    {
        (*(uint8_t volatile *)DdrAddress) |= (1 << NOPin);
     e5e:	d0 9a       	sbi	0x1a, 0	; 26
     e60:	08 95       	ret

00000e62 <_ZN4PinSILh59ELh57ELh58ELh0EE7AsInputEv>:
    }

    void AsInput()
    {
        (*(uint8_t volatile*)DdrAddress) &= ~(1 << NOPin);
     e62:	d0 98       	cbi	0x1a, 0	; 26
     e64:	08 95       	ret

00000e66 <_ZN4PinSILh53ELh51ELh52ELh0EED0Ev>:
     e66:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     e6a:	08 95       	ret

00000e6c <_ZN4PinSILh53ELh51ELh52ELh1EED0Ev>:
     e6c:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     e70:	08 95       	ret

00000e72 <_ZN4PinSILh53ELh51ELh52ELh2EED0Ev>:
     e72:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     e76:	08 95       	ret

00000e78 <_ZN4PinSILh53ELh51ELh52ELh3EED0Ev>:
     e78:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     e7c:	08 95       	ret

00000e7e <_ZN4PinSILh53ELh51ELh52ELh4EED0Ev>:
     e7e:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     e82:	08 95       	ret

00000e84 <_ZN4PinSILh53ELh51ELh52ELh5EED0Ev>:
     e84:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     e88:	08 95       	ret

00000e8a <_ZN4PinSILh53ELh51ELh52ELh6EED0Ev>:
     e8a:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     e8e:	08 95       	ret

00000e90 <_ZN4PinSILh53ELh51ELh52ELh7EED0Ev>:
     e90:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     e94:	08 95       	ret

00000e96 <_ZN4PinSILh56ELh54ELh55ELh7EED0Ev>:
     e96:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     e9a:	08 95       	ret

00000e9c <_ZN4PinSILh56ELh54ELh55ELh6EED0Ev>:
     e9c:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     ea0:	08 95       	ret

00000ea2 <_ZN4PinSILh56ELh54ELh55ELh5EED0Ev>:
     ea2:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     ea6:	08 95       	ret

00000ea8 <_ZN4PinSILh56ELh54ELh55ELh4EED0Ev>:
     ea8:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     eac:	08 95       	ret

00000eae <_ZN4PinSILh56ELh54ELh55ELh3EED0Ev>:
     eae:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     eb2:	08 95       	ret

00000eb4 <_ZN4PinSILh56ELh54ELh55ELh2EED0Ev>:
     eb4:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     eb8:	08 95       	ret

00000eba <_ZN4PinSILh56ELh54ELh55ELh1EED0Ev>:
     eba:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     ebe:	08 95       	ret

00000ec0 <_ZN4PinSILh56ELh54ELh55ELh0EED0Ev>:
     ec0:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     ec4:	08 95       	ret

00000ec6 <_ZN4PinSILh59ELh57ELh58ELh2EED0Ev>:
     ec6:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     eca:	08 95       	ret

00000ecc <_ZN4PinSILh59ELh57ELh58ELh1EED0Ev>:
     ecc:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     ed0:	08 95       	ret

00000ed2 <_ZN4PinSILh59ELh57ELh58ELh0EED0Ev>:
     ed2:	0e 94 a3 09 	call	0x1346	; 0x1346 <free>
     ed6:	08 95       	ret

00000ed8 <__divsf3>:
     ed8:	0e 94 80 07 	call	0xf00	; 0xf00 <__divsf3x>
     edc:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_round>
     ee0:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fp_pscB>
     ee4:	58 f0       	brcs	.+22     	; 0xefc <__divsf3+0x24>
     ee6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_pscA>
     eea:	40 f0       	brcs	.+16     	; 0xefc <__divsf3+0x24>
     eec:	29 f4       	brne	.+10     	; 0xef8 <__divsf3+0x20>
     eee:	5f 3f       	cpi	r21, 0xFF	; 255
     ef0:	29 f0       	breq	.+10     	; 0xefc <__divsf3+0x24>
     ef2:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>
     ef6:	51 11       	cpse	r21, r1
     ef8:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_szero>
     efc:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__fp_nan>

00000f00 <__divsf3x>:
     f00:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_split3>
     f04:	68 f3       	brcs	.-38     	; 0xee0 <__divsf3+0x8>

00000f06 <__divsf3_pse>:
     f06:	99 23       	and	r25, r25
     f08:	b1 f3       	breq	.-20     	; 0xef6 <__divsf3+0x1e>
     f0a:	55 23       	and	r21, r21
     f0c:	91 f3       	breq	.-28     	; 0xef2 <__divsf3+0x1a>
     f0e:	95 1b       	sub	r25, r21
     f10:	55 0b       	sbc	r21, r21
     f12:	bb 27       	eor	r27, r27
     f14:	aa 27       	eor	r26, r26
     f16:	62 17       	cp	r22, r18
     f18:	73 07       	cpc	r23, r19
     f1a:	84 07       	cpc	r24, r20
     f1c:	38 f0       	brcs	.+14     	; 0xf2c <__divsf3_pse+0x26>
     f1e:	9f 5f       	subi	r25, 0xFF	; 255
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
     f22:	22 0f       	add	r18, r18
     f24:	33 1f       	adc	r19, r19
     f26:	44 1f       	adc	r20, r20
     f28:	aa 1f       	adc	r26, r26
     f2a:	a9 f3       	breq	.-22     	; 0xf16 <__divsf3_pse+0x10>
     f2c:	35 d0       	rcall	.+106    	; 0xf98 <__divsf3_pse+0x92>
     f2e:	0e 2e       	mov	r0, r30
     f30:	3a f0       	brmi	.+14     	; 0xf40 <__divsf3_pse+0x3a>
     f32:	e0 e8       	ldi	r30, 0x80	; 128
     f34:	32 d0       	rcall	.+100    	; 0xf9a <__divsf3_pse+0x94>
     f36:	91 50       	subi	r25, 0x01	; 1
     f38:	50 40       	sbci	r21, 0x00	; 0
     f3a:	e6 95       	lsr	r30
     f3c:	00 1c       	adc	r0, r0
     f3e:	ca f7       	brpl	.-14     	; 0xf32 <__divsf3_pse+0x2c>
     f40:	2b d0       	rcall	.+86     	; 0xf98 <__divsf3_pse+0x92>
     f42:	fe 2f       	mov	r31, r30
     f44:	29 d0       	rcall	.+82     	; 0xf98 <__divsf3_pse+0x92>
     f46:	66 0f       	add	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	88 1f       	adc	r24, r24
     f4c:	bb 1f       	adc	r27, r27
     f4e:	26 17       	cp	r18, r22
     f50:	37 07       	cpc	r19, r23
     f52:	48 07       	cpc	r20, r24
     f54:	ab 07       	cpc	r26, r27
     f56:	b0 e8       	ldi	r27, 0x80	; 128
     f58:	09 f0       	breq	.+2      	; 0xf5c <__divsf3_pse+0x56>
     f5a:	bb 0b       	sbc	r27, r27
     f5c:	80 2d       	mov	r24, r0
     f5e:	bf 01       	movw	r22, r30
     f60:	ff 27       	eor	r31, r31
     f62:	93 58       	subi	r25, 0x83	; 131
     f64:	5f 4f       	sbci	r21, 0xFF	; 255
     f66:	3a f0       	brmi	.+14     	; 0xf76 <__divsf3_pse+0x70>
     f68:	9e 3f       	cpi	r25, 0xFE	; 254
     f6a:	51 05       	cpc	r21, r1
     f6c:	78 f0       	brcs	.+30     	; 0xf8c <__divsf3_pse+0x86>
     f6e:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>
     f72:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_szero>
     f76:	5f 3f       	cpi	r21, 0xFF	; 255
     f78:	e4 f3       	brlt	.-8      	; 0xf72 <__divsf3_pse+0x6c>
     f7a:	98 3e       	cpi	r25, 0xE8	; 232
     f7c:	d4 f3       	brlt	.-12     	; 0xf72 <__divsf3_pse+0x6c>
     f7e:	86 95       	lsr	r24
     f80:	77 95       	ror	r23
     f82:	67 95       	ror	r22
     f84:	b7 95       	ror	r27
     f86:	f7 95       	ror	r31
     f88:	9f 5f       	subi	r25, 0xFF	; 255
     f8a:	c9 f7       	brne	.-14     	; 0xf7e <__divsf3_pse+0x78>
     f8c:	88 0f       	add	r24, r24
     f8e:	91 1d       	adc	r25, r1
     f90:	96 95       	lsr	r25
     f92:	87 95       	ror	r24
     f94:	97 f9       	bld	r25, 7
     f96:	08 95       	ret
     f98:	e1 e0       	ldi	r30, 0x01	; 1
     f9a:	66 0f       	add	r22, r22
     f9c:	77 1f       	adc	r23, r23
     f9e:	88 1f       	adc	r24, r24
     fa0:	bb 1f       	adc	r27, r27
     fa2:	62 17       	cp	r22, r18
     fa4:	73 07       	cpc	r23, r19
     fa6:	84 07       	cpc	r24, r20
     fa8:	ba 07       	cpc	r27, r26
     faa:	20 f0       	brcs	.+8      	; 0xfb4 <__divsf3_pse+0xae>
     fac:	62 1b       	sub	r22, r18
     fae:	73 0b       	sbc	r23, r19
     fb0:	84 0b       	sbc	r24, r20
     fb2:	ba 0b       	sbc	r27, r26
     fb4:	ee 1f       	adc	r30, r30
     fb6:	88 f7       	brcc	.-30     	; 0xf9a <__divsf3_pse+0x94>
     fb8:	e0 95       	com	r30
     fba:	08 95       	ret

00000fbc <__fixunssfsi>:
     fbc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_splitA>
     fc0:	88 f0       	brcs	.+34     	; 0xfe4 <__fixunssfsi+0x28>
     fc2:	9f 57       	subi	r25, 0x7F	; 127
     fc4:	98 f0       	brcs	.+38     	; 0xfec <__fixunssfsi+0x30>
     fc6:	b9 2f       	mov	r27, r25
     fc8:	99 27       	eor	r25, r25
     fca:	b7 51       	subi	r27, 0x17	; 23
     fcc:	b0 f0       	brcs	.+44     	; 0xffa <__fixunssfsi+0x3e>
     fce:	e1 f0       	breq	.+56     	; 0x1008 <__fixunssfsi+0x4c>
     fd0:	66 0f       	add	r22, r22
     fd2:	77 1f       	adc	r23, r23
     fd4:	88 1f       	adc	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	1a f0       	brmi	.+6      	; 0xfe0 <__fixunssfsi+0x24>
     fda:	ba 95       	dec	r27
     fdc:	c9 f7       	brne	.-14     	; 0xfd0 <__fixunssfsi+0x14>
     fde:	14 c0       	rjmp	.+40     	; 0x1008 <__fixunssfsi+0x4c>
     fe0:	b1 30       	cpi	r27, 0x01	; 1
     fe2:	91 f0       	breq	.+36     	; 0x1008 <__fixunssfsi+0x4c>
     fe4:	0e 94 94 08 	call	0x1128	; 0x1128 <__fp_zero>
     fe8:	b1 e0       	ldi	r27, 0x01	; 1
     fea:	08 95       	ret
     fec:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_zero>
     ff0:	67 2f       	mov	r22, r23
     ff2:	78 2f       	mov	r23, r24
     ff4:	88 27       	eor	r24, r24
     ff6:	b8 5f       	subi	r27, 0xF8	; 248
     ff8:	39 f0       	breq	.+14     	; 0x1008 <__fixunssfsi+0x4c>
     ffa:	b9 3f       	cpi	r27, 0xF9	; 249
     ffc:	cc f3       	brlt	.-14     	; 0xff0 <__fixunssfsi+0x34>
     ffe:	86 95       	lsr	r24
    1000:	77 95       	ror	r23
    1002:	67 95       	ror	r22
    1004:	b3 95       	inc	r27
    1006:	d9 f7       	brne	.-10     	; 0xffe <__fixunssfsi+0x42>
    1008:	3e f4       	brtc	.+14     	; 0x1018 <__fixunssfsi+0x5c>
    100a:	90 95       	com	r25
    100c:	80 95       	com	r24
    100e:	70 95       	com	r23
    1010:	61 95       	neg	r22
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	08 95       	ret

0000101a <__floatunsisf>:
    101a:	e8 94       	clt
    101c:	09 c0       	rjmp	.+18     	; 0x1030 <__floatsisf+0x12>

0000101e <__floatsisf>:
    101e:	97 fb       	bst	r25, 7
    1020:	3e f4       	brtc	.+14     	; 0x1030 <__floatsisf+0x12>
    1022:	90 95       	com	r25
    1024:	80 95       	com	r24
    1026:	70 95       	com	r23
    1028:	61 95       	neg	r22
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8f 4f       	sbci	r24, 0xFF	; 255
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	99 23       	and	r25, r25
    1032:	a9 f0       	breq	.+42     	; 0x105e <__floatsisf+0x40>
    1034:	f9 2f       	mov	r31, r25
    1036:	96 e9       	ldi	r25, 0x96	; 150
    1038:	bb 27       	eor	r27, r27
    103a:	93 95       	inc	r25
    103c:	f6 95       	lsr	r31
    103e:	87 95       	ror	r24
    1040:	77 95       	ror	r23
    1042:	67 95       	ror	r22
    1044:	b7 95       	ror	r27
    1046:	f1 11       	cpse	r31, r1
    1048:	f8 cf       	rjmp	.-16     	; 0x103a <__floatsisf+0x1c>
    104a:	fa f4       	brpl	.+62     	; 0x108a <__floatsisf+0x6c>
    104c:	bb 0f       	add	r27, r27
    104e:	11 f4       	brne	.+4      	; 0x1054 <__floatsisf+0x36>
    1050:	60 ff       	sbrs	r22, 0
    1052:	1b c0       	rjmp	.+54     	; 0x108a <__floatsisf+0x6c>
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	8f 4f       	sbci	r24, 0xFF	; 255
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	16 c0       	rjmp	.+44     	; 0x108a <__floatsisf+0x6c>
    105e:	88 23       	and	r24, r24
    1060:	11 f0       	breq	.+4      	; 0x1066 <__floatsisf+0x48>
    1062:	96 e9       	ldi	r25, 0x96	; 150
    1064:	11 c0       	rjmp	.+34     	; 0x1088 <__floatsisf+0x6a>
    1066:	77 23       	and	r23, r23
    1068:	21 f0       	breq	.+8      	; 0x1072 <__floatsisf+0x54>
    106a:	9e e8       	ldi	r25, 0x8E	; 142
    106c:	87 2f       	mov	r24, r23
    106e:	76 2f       	mov	r23, r22
    1070:	05 c0       	rjmp	.+10     	; 0x107c <__floatsisf+0x5e>
    1072:	66 23       	and	r22, r22
    1074:	71 f0       	breq	.+28     	; 0x1092 <__floatsisf+0x74>
    1076:	96 e8       	ldi	r25, 0x86	; 134
    1078:	86 2f       	mov	r24, r22
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	2a f0       	brmi	.+10     	; 0x108a <__floatsisf+0x6c>
    1080:	9a 95       	dec	r25
    1082:	66 0f       	add	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	88 1f       	adc	r24, r24
    1088:	da f7       	brpl	.-10     	; 0x1080 <__floatsisf+0x62>
    108a:	88 0f       	add	r24, r24
    108c:	96 95       	lsr	r25
    108e:	87 95       	ror	r24
    1090:	97 f9       	bld	r25, 7
    1092:	08 95       	ret

00001094 <__fp_inf>:
    1094:	97 f9       	bld	r25, 7
    1096:	9f 67       	ori	r25, 0x7F	; 127
    1098:	80 e8       	ldi	r24, 0x80	; 128
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	08 95       	ret

000010a0 <__fp_nan>:
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	80 ec       	ldi	r24, 0xC0	; 192
    10a4:	08 95       	ret

000010a6 <__fp_pscA>:
    10a6:	00 24       	eor	r0, r0
    10a8:	0a 94       	dec	r0
    10aa:	16 16       	cp	r1, r22
    10ac:	17 06       	cpc	r1, r23
    10ae:	18 06       	cpc	r1, r24
    10b0:	09 06       	cpc	r0, r25
    10b2:	08 95       	ret

000010b4 <__fp_pscB>:
    10b4:	00 24       	eor	r0, r0
    10b6:	0a 94       	dec	r0
    10b8:	12 16       	cp	r1, r18
    10ba:	13 06       	cpc	r1, r19
    10bc:	14 06       	cpc	r1, r20
    10be:	05 06       	cpc	r0, r21
    10c0:	08 95       	ret

000010c2 <__fp_round>:
    10c2:	09 2e       	mov	r0, r25
    10c4:	03 94       	inc	r0
    10c6:	00 0c       	add	r0, r0
    10c8:	11 f4       	brne	.+4      	; 0x10ce <__fp_round+0xc>
    10ca:	88 23       	and	r24, r24
    10cc:	52 f0       	brmi	.+20     	; 0x10e2 <__fp_round+0x20>
    10ce:	bb 0f       	add	r27, r27
    10d0:	40 f4       	brcc	.+16     	; 0x10e2 <__fp_round+0x20>
    10d2:	bf 2b       	or	r27, r31
    10d4:	11 f4       	brne	.+4      	; 0x10da <__fp_round+0x18>
    10d6:	60 ff       	sbrs	r22, 0
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <__fp_round+0x20>
    10da:	6f 5f       	subi	r22, 0xFF	; 255
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	08 95       	ret

000010e4 <__fp_split3>:
    10e4:	57 fd       	sbrc	r21, 7
    10e6:	90 58       	subi	r25, 0x80	; 128
    10e8:	44 0f       	add	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	59 f0       	breq	.+22     	; 0x1104 <__fp_splitA+0x10>
    10ee:	5f 3f       	cpi	r21, 0xFF	; 255
    10f0:	71 f0       	breq	.+28     	; 0x110e <__fp_splitA+0x1a>
    10f2:	47 95       	ror	r20

000010f4 <__fp_splitA>:
    10f4:	88 0f       	add	r24, r24
    10f6:	97 fb       	bst	r25, 7
    10f8:	99 1f       	adc	r25, r25
    10fa:	61 f0       	breq	.+24     	; 0x1114 <__fp_splitA+0x20>
    10fc:	9f 3f       	cpi	r25, 0xFF	; 255
    10fe:	79 f0       	breq	.+30     	; 0x111e <__fp_splitA+0x2a>
    1100:	87 95       	ror	r24
    1102:	08 95       	ret
    1104:	12 16       	cp	r1, r18
    1106:	13 06       	cpc	r1, r19
    1108:	14 06       	cpc	r1, r20
    110a:	55 1f       	adc	r21, r21
    110c:	f2 cf       	rjmp	.-28     	; 0x10f2 <__fp_split3+0xe>
    110e:	46 95       	lsr	r20
    1110:	f1 df       	rcall	.-30     	; 0x10f4 <__fp_splitA>
    1112:	08 c0       	rjmp	.+16     	; 0x1124 <__fp_splitA+0x30>
    1114:	16 16       	cp	r1, r22
    1116:	17 06       	cpc	r1, r23
    1118:	18 06       	cpc	r1, r24
    111a:	99 1f       	adc	r25, r25
    111c:	f1 cf       	rjmp	.-30     	; 0x1100 <__fp_splitA+0xc>
    111e:	86 95       	lsr	r24
    1120:	71 05       	cpc	r23, r1
    1122:	61 05       	cpc	r22, r1
    1124:	08 94       	sec
    1126:	08 95       	ret

00001128 <__fp_zero>:
    1128:	e8 94       	clt

0000112a <__fp_szero>:
    112a:	bb 27       	eor	r27, r27
    112c:	66 27       	eor	r22, r22
    112e:	77 27       	eor	r23, r23
    1130:	cb 01       	movw	r24, r22
    1132:	97 f9       	bld	r25, 7
    1134:	08 95       	ret

00001136 <__mulsf3>:
    1136:	0e 94 ae 08 	call	0x115c	; 0x115c <__mulsf3x>
    113a:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__fp_round>
    113e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_pscA>
    1142:	38 f0       	brcs	.+14     	; 0x1152 <__mulsf3+0x1c>
    1144:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fp_pscB>
    1148:	20 f0       	brcs	.+8      	; 0x1152 <__mulsf3+0x1c>
    114a:	95 23       	and	r25, r21
    114c:	11 f0       	breq	.+4      	; 0x1152 <__mulsf3+0x1c>
    114e:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>
    1152:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__fp_nan>
    1156:	11 24       	eor	r1, r1
    1158:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_szero>

0000115c <__mulsf3x>:
    115c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_split3>
    1160:	70 f3       	brcs	.-36     	; 0x113e <__mulsf3+0x8>

00001162 <__mulsf3_pse>:
    1162:	95 9f       	mul	r25, r21
    1164:	c1 f3       	breq	.-16     	; 0x1156 <__mulsf3+0x20>
    1166:	95 0f       	add	r25, r21
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	55 1f       	adc	r21, r21
    116c:	62 9f       	mul	r22, r18
    116e:	f0 01       	movw	r30, r0
    1170:	72 9f       	mul	r23, r18
    1172:	bb 27       	eor	r27, r27
    1174:	f0 0d       	add	r31, r0
    1176:	b1 1d       	adc	r27, r1
    1178:	63 9f       	mul	r22, r19
    117a:	aa 27       	eor	r26, r26
    117c:	f0 0d       	add	r31, r0
    117e:	b1 1d       	adc	r27, r1
    1180:	aa 1f       	adc	r26, r26
    1182:	64 9f       	mul	r22, r20
    1184:	66 27       	eor	r22, r22
    1186:	b0 0d       	add	r27, r0
    1188:	a1 1d       	adc	r26, r1
    118a:	66 1f       	adc	r22, r22
    118c:	82 9f       	mul	r24, r18
    118e:	22 27       	eor	r18, r18
    1190:	b0 0d       	add	r27, r0
    1192:	a1 1d       	adc	r26, r1
    1194:	62 1f       	adc	r22, r18
    1196:	73 9f       	mul	r23, r19
    1198:	b0 0d       	add	r27, r0
    119a:	a1 1d       	adc	r26, r1
    119c:	62 1f       	adc	r22, r18
    119e:	83 9f       	mul	r24, r19
    11a0:	a0 0d       	add	r26, r0
    11a2:	61 1d       	adc	r22, r1
    11a4:	22 1f       	adc	r18, r18
    11a6:	74 9f       	mul	r23, r20
    11a8:	33 27       	eor	r19, r19
    11aa:	a0 0d       	add	r26, r0
    11ac:	61 1d       	adc	r22, r1
    11ae:	23 1f       	adc	r18, r19
    11b0:	84 9f       	mul	r24, r20
    11b2:	60 0d       	add	r22, r0
    11b4:	21 1d       	adc	r18, r1
    11b6:	82 2f       	mov	r24, r18
    11b8:	76 2f       	mov	r23, r22
    11ba:	6a 2f       	mov	r22, r26
    11bc:	11 24       	eor	r1, r1
    11be:	9f 57       	subi	r25, 0x7F	; 127
    11c0:	50 40       	sbci	r21, 0x00	; 0
    11c2:	9a f0       	brmi	.+38     	; 0x11ea <__mulsf3_pse+0x88>
    11c4:	f1 f0       	breq	.+60     	; 0x1202 <__mulsf3_pse+0xa0>
    11c6:	88 23       	and	r24, r24
    11c8:	4a f0       	brmi	.+18     	; 0x11dc <__mulsf3_pse+0x7a>
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	bb 1f       	adc	r27, r27
    11d0:	66 1f       	adc	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	88 1f       	adc	r24, r24
    11d6:	91 50       	subi	r25, 0x01	; 1
    11d8:	50 40       	sbci	r21, 0x00	; 0
    11da:	a9 f7       	brne	.-22     	; 0x11c6 <__mulsf3_pse+0x64>
    11dc:	9e 3f       	cpi	r25, 0xFE	; 254
    11de:	51 05       	cpc	r21, r1
    11e0:	80 f0       	brcs	.+32     	; 0x1202 <__mulsf3_pse+0xa0>
    11e2:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_inf>
    11e6:	0c 94 95 08 	jmp	0x112a	; 0x112a <__fp_szero>
    11ea:	5f 3f       	cpi	r21, 0xFF	; 255
    11ec:	e4 f3       	brlt	.-8      	; 0x11e6 <__mulsf3_pse+0x84>
    11ee:	98 3e       	cpi	r25, 0xE8	; 232
    11f0:	d4 f3       	brlt	.-12     	; 0x11e6 <__mulsf3_pse+0x84>
    11f2:	86 95       	lsr	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	b7 95       	ror	r27
    11fa:	f7 95       	ror	r31
    11fc:	e7 95       	ror	r30
    11fe:	9f 5f       	subi	r25, 0xFF	; 255
    1200:	c1 f7       	brne	.-16     	; 0x11f2 <__mulsf3_pse+0x90>
    1202:	fe 2b       	or	r31, r30
    1204:	88 0f       	add	r24, r24
    1206:	91 1d       	adc	r25, r1
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	97 f9       	bld	r25, 7
    120e:	08 95       	ret

00001210 <__tablejump2__>:
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	05 90       	lpm	r0, Z+
    1216:	f4 91       	lpm	r31, Z
    1218:	e0 2d       	mov	r30, r0
    121a:	09 94       	ijmp

0000121c <malloc>:
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	91 05       	cpc	r25, r1
    1224:	10 f4       	brcc	.+4      	; 0x122a <malloc+0xe>
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	e0 91 56 03 	lds	r30, 0x0356
    122e:	f0 91 57 03 	lds	r31, 0x0357
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	c0 e0       	ldi	r28, 0x00	; 0
    1238:	d0 e0       	ldi	r29, 0x00	; 0
    123a:	30 97       	sbiw	r30, 0x00	; 0
    123c:	11 f1       	breq	.+68     	; 0x1282 <malloc+0x66>
    123e:	40 81       	ld	r20, Z
    1240:	51 81       	ldd	r21, Z+1	; 0x01
    1242:	48 17       	cp	r20, r24
    1244:	59 07       	cpc	r21, r25
    1246:	c0 f0       	brcs	.+48     	; 0x1278 <malloc+0x5c>
    1248:	48 17       	cp	r20, r24
    124a:	59 07       	cpc	r21, r25
    124c:	61 f4       	brne	.+24     	; 0x1266 <malloc+0x4a>
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	20 97       	sbiw	r28, 0x00	; 0
    1254:	19 f0       	breq	.+6      	; 0x125c <malloc+0x40>
    1256:	9b 83       	std	Y+3, r25	; 0x03
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	2b c0       	rjmp	.+86     	; 0x12b2 <malloc+0x96>
    125c:	90 93 57 03 	sts	0x0357, r25
    1260:	80 93 56 03 	sts	0x0356, r24
    1264:	26 c0       	rjmp	.+76     	; 0x12b2 <malloc+0x96>
    1266:	21 15       	cp	r18, r1
    1268:	31 05       	cpc	r19, r1
    126a:	19 f0       	breq	.+6      	; 0x1272 <malloc+0x56>
    126c:	42 17       	cp	r20, r18
    126e:	53 07       	cpc	r21, r19
    1270:	18 f4       	brcc	.+6      	; 0x1278 <malloc+0x5c>
    1272:	9a 01       	movw	r18, r20
    1274:	be 01       	movw	r22, r28
    1276:	df 01       	movw	r26, r30
    1278:	ef 01       	movw	r28, r30
    127a:	02 80       	ldd	r0, Z+2	; 0x02
    127c:	f3 81       	ldd	r31, Z+3	; 0x03
    127e:	e0 2d       	mov	r30, r0
    1280:	dc cf       	rjmp	.-72     	; 0x123a <malloc+0x1e>
    1282:	21 15       	cp	r18, r1
    1284:	31 05       	cpc	r19, r1
    1286:	09 f1       	breq	.+66     	; 0x12ca <malloc+0xae>
    1288:	28 1b       	sub	r18, r24
    128a:	39 0b       	sbc	r19, r25
    128c:	24 30       	cpi	r18, 0x04	; 4
    128e:	31 05       	cpc	r19, r1
    1290:	90 f4       	brcc	.+36     	; 0x12b6 <malloc+0x9a>
    1292:	12 96       	adiw	r26, 0x02	; 2
    1294:	8d 91       	ld	r24, X+
    1296:	9c 91       	ld	r25, X
    1298:	13 97       	sbiw	r26, 0x03	; 3
    129a:	61 15       	cp	r22, r1
    129c:	71 05       	cpc	r23, r1
    129e:	21 f0       	breq	.+8      	; 0x12a8 <malloc+0x8c>
    12a0:	fb 01       	movw	r30, r22
    12a2:	93 83       	std	Z+3, r25	; 0x03
    12a4:	82 83       	std	Z+2, r24	; 0x02
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <malloc+0x94>
    12a8:	90 93 57 03 	sts	0x0357, r25
    12ac:	80 93 56 03 	sts	0x0356, r24
    12b0:	fd 01       	movw	r30, r26
    12b2:	32 96       	adiw	r30, 0x02	; 2
    12b4:	44 c0       	rjmp	.+136    	; 0x133e <malloc+0x122>
    12b6:	fd 01       	movw	r30, r26
    12b8:	e2 0f       	add	r30, r18
    12ba:	f3 1f       	adc	r31, r19
    12bc:	81 93       	st	Z+, r24
    12be:	91 93       	st	Z+, r25
    12c0:	22 50       	subi	r18, 0x02	; 2
    12c2:	31 09       	sbc	r19, r1
    12c4:	2d 93       	st	X+, r18
    12c6:	3c 93       	st	X, r19
    12c8:	3a c0       	rjmp	.+116    	; 0x133e <malloc+0x122>
    12ca:	20 91 54 03 	lds	r18, 0x0354
    12ce:	30 91 55 03 	lds	r19, 0x0355
    12d2:	23 2b       	or	r18, r19
    12d4:	41 f4       	brne	.+16     	; 0x12e6 <malloc+0xca>
    12d6:	20 91 88 00 	lds	r18, 0x0088
    12da:	30 91 89 00 	lds	r19, 0x0089
    12de:	30 93 55 03 	sts	0x0355, r19
    12e2:	20 93 54 03 	sts	0x0354, r18
    12e6:	20 91 86 00 	lds	r18, 0x0086
    12ea:	30 91 87 00 	lds	r19, 0x0087
    12ee:	21 15       	cp	r18, r1
    12f0:	31 05       	cpc	r19, r1
    12f2:	41 f4       	brne	.+16     	; 0x1304 <malloc+0xe8>
    12f4:	2d b7       	in	r18, 0x3d	; 61
    12f6:	3e b7       	in	r19, 0x3e	; 62
    12f8:	40 91 8a 00 	lds	r20, 0x008A
    12fc:	50 91 8b 00 	lds	r21, 0x008B
    1300:	24 1b       	sub	r18, r20
    1302:	35 0b       	sbc	r19, r21
    1304:	e0 91 54 03 	lds	r30, 0x0354
    1308:	f0 91 55 03 	lds	r31, 0x0355
    130c:	e2 17       	cp	r30, r18
    130e:	f3 07       	cpc	r31, r19
    1310:	a0 f4       	brcc	.+40     	; 0x133a <malloc+0x11e>
    1312:	2e 1b       	sub	r18, r30
    1314:	3f 0b       	sbc	r19, r31
    1316:	28 17       	cp	r18, r24
    1318:	39 07       	cpc	r19, r25
    131a:	78 f0       	brcs	.+30     	; 0x133a <malloc+0x11e>
    131c:	ac 01       	movw	r20, r24
    131e:	4e 5f       	subi	r20, 0xFE	; 254
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	24 17       	cp	r18, r20
    1324:	35 07       	cpc	r19, r21
    1326:	48 f0       	brcs	.+18     	; 0x133a <malloc+0x11e>
    1328:	4e 0f       	add	r20, r30
    132a:	5f 1f       	adc	r21, r31
    132c:	50 93 55 03 	sts	0x0355, r21
    1330:	40 93 54 03 	sts	0x0354, r20
    1334:	81 93       	st	Z+, r24
    1336:	91 93       	st	Z+, r25
    1338:	02 c0       	rjmp	.+4      	; 0x133e <malloc+0x122>
    133a:	e0 e0       	ldi	r30, 0x00	; 0
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	cf 01       	movw	r24, r30
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <free>:
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	09 f4       	brne	.+2      	; 0x1354 <free+0xe>
    1352:	8c c0       	rjmp	.+280    	; 0x146c <free+0x126>
    1354:	fc 01       	movw	r30, r24
    1356:	32 97       	sbiw	r30, 0x02	; 2
    1358:	13 82       	std	Z+3, r1	; 0x03
    135a:	12 82       	std	Z+2, r1	; 0x02
    135c:	00 91 56 03 	lds	r16, 0x0356
    1360:	10 91 57 03 	lds	r17, 0x0357
    1364:	01 15       	cp	r16, r1
    1366:	11 05       	cpc	r17, r1
    1368:	81 f4       	brne	.+32     	; 0x138a <free+0x44>
    136a:	20 81       	ld	r18, Z
    136c:	31 81       	ldd	r19, Z+1	; 0x01
    136e:	82 0f       	add	r24, r18
    1370:	93 1f       	adc	r25, r19
    1372:	20 91 54 03 	lds	r18, 0x0354
    1376:	30 91 55 03 	lds	r19, 0x0355
    137a:	28 17       	cp	r18, r24
    137c:	39 07       	cpc	r19, r25
    137e:	79 f5       	brne	.+94     	; 0x13de <free+0x98>
    1380:	f0 93 55 03 	sts	0x0355, r31
    1384:	e0 93 54 03 	sts	0x0354, r30
    1388:	71 c0       	rjmp	.+226    	; 0x146c <free+0x126>
    138a:	d8 01       	movw	r26, r16
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	ae 17       	cp	r26, r30
    1392:	bf 07       	cpc	r27, r31
    1394:	50 f4       	brcc	.+20     	; 0x13aa <free+0x64>
    1396:	12 96       	adiw	r26, 0x02	; 2
    1398:	2d 91       	ld	r18, X+
    139a:	3c 91       	ld	r19, X
    139c:	13 97       	sbiw	r26, 0x03	; 3
    139e:	ad 01       	movw	r20, r26
    13a0:	21 15       	cp	r18, r1
    13a2:	31 05       	cpc	r19, r1
    13a4:	09 f1       	breq	.+66     	; 0x13e8 <free+0xa2>
    13a6:	d9 01       	movw	r26, r18
    13a8:	f3 cf       	rjmp	.-26     	; 0x1390 <free+0x4a>
    13aa:	9d 01       	movw	r18, r26
    13ac:	da 01       	movw	r26, r20
    13ae:	33 83       	std	Z+3, r19	; 0x03
    13b0:	22 83       	std	Z+2, r18	; 0x02
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
    13b6:	86 0f       	add	r24, r22
    13b8:	97 1f       	adc	r25, r23
    13ba:	82 17       	cp	r24, r18
    13bc:	93 07       	cpc	r25, r19
    13be:	69 f4       	brne	.+26     	; 0x13da <free+0x94>
    13c0:	ec 01       	movw	r28, r24
    13c2:	28 81       	ld	r18, Y
    13c4:	39 81       	ldd	r19, Y+1	; 0x01
    13c6:	26 0f       	add	r18, r22
    13c8:	37 1f       	adc	r19, r23
    13ca:	2e 5f       	subi	r18, 0xFE	; 254
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	31 83       	std	Z+1, r19	; 0x01
    13d0:	20 83       	st	Z, r18
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	93 83       	std	Z+3, r25	; 0x03
    13d8:	82 83       	std	Z+2, r24	; 0x02
    13da:	45 2b       	or	r20, r21
    13dc:	29 f4       	brne	.+10     	; 0x13e8 <free+0xa2>
    13de:	f0 93 57 03 	sts	0x0357, r31
    13e2:	e0 93 56 03 	sts	0x0356, r30
    13e6:	42 c0       	rjmp	.+132    	; 0x146c <free+0x126>
    13e8:	13 96       	adiw	r26, 0x03	; 3
    13ea:	fc 93       	st	X, r31
    13ec:	ee 93       	st	-X, r30
    13ee:	12 97       	sbiw	r26, 0x02	; 2
    13f0:	ed 01       	movw	r28, r26
    13f2:	49 91       	ld	r20, Y+
    13f4:	59 91       	ld	r21, Y+
    13f6:	9e 01       	movw	r18, r28
    13f8:	24 0f       	add	r18, r20
    13fa:	35 1f       	adc	r19, r21
    13fc:	e2 17       	cp	r30, r18
    13fe:	f3 07       	cpc	r31, r19
    1400:	71 f4       	brne	.+28     	; 0x141e <free+0xd8>
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	84 0f       	add	r24, r20
    1408:	95 1f       	adc	r25, r21
    140a:	02 96       	adiw	r24, 0x02	; 2
    140c:	11 96       	adiw	r26, 0x01	; 1
    140e:	9c 93       	st	X, r25
    1410:	8e 93       	st	-X, r24
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	93 81       	ldd	r25, Z+3	; 0x03
    1416:	13 96       	adiw	r26, 0x03	; 3
    1418:	9c 93       	st	X, r25
    141a:	8e 93       	st	-X, r24
    141c:	12 97       	sbiw	r26, 0x02	; 2
    141e:	e0 e0       	ldi	r30, 0x00	; 0
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	d8 01       	movw	r26, r16
    1424:	12 96       	adiw	r26, 0x02	; 2
    1426:	8d 91       	ld	r24, X+
    1428:	9c 91       	ld	r25, X
    142a:	13 97       	sbiw	r26, 0x03	; 3
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	19 f0       	breq	.+6      	; 0x1436 <free+0xf0>
    1430:	f8 01       	movw	r30, r16
    1432:	8c 01       	movw	r16, r24
    1434:	f6 cf       	rjmp	.-20     	; 0x1422 <free+0xdc>
    1436:	8d 91       	ld	r24, X+
    1438:	9c 91       	ld	r25, X
    143a:	98 01       	movw	r18, r16
    143c:	2e 5f       	subi	r18, 0xFE	; 254
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	82 0f       	add	r24, r18
    1442:	93 1f       	adc	r25, r19
    1444:	20 91 54 03 	lds	r18, 0x0354
    1448:	30 91 55 03 	lds	r19, 0x0355
    144c:	28 17       	cp	r18, r24
    144e:	39 07       	cpc	r19, r25
    1450:	69 f4       	brne	.+26     	; 0x146c <free+0x126>
    1452:	30 97       	sbiw	r30, 0x00	; 0
    1454:	29 f4       	brne	.+10     	; 0x1460 <free+0x11a>
    1456:	10 92 57 03 	sts	0x0357, r1
    145a:	10 92 56 03 	sts	0x0356, r1
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <free+0x11e>
    1460:	13 82       	std	Z+3, r1	; 0x03
    1462:	12 82       	std	Z+2, r1	; 0x02
    1464:	10 93 55 03 	sts	0x0355, r17
    1468:	00 93 54 03 	sts	0x0354, r16
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	08 95       	ret

00001476 <__do_global_dtors>:
    1476:	10 e0       	ldi	r17, 0x00	; 0
    1478:	cb e2       	ldi	r28, 0x2B	; 43
    147a:	d0 e0       	ldi	r29, 0x00	; 0
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <__do_global_dtors+0x10>
    147e:	fe 01       	movw	r30, r28
    1480:	0e 94 08 09 	call	0x1210	; 0x1210 <__tablejump2__>
    1484:	21 96       	adiw	r28, 0x01	; 1
    1486:	cc 32       	cpi	r28, 0x2C	; 44
    1488:	d1 07       	cpc	r29, r17
    148a:	c9 f7       	brne	.-14     	; 0x147e <__do_global_dtors+0x8>
    148c:	f8 94       	cli

0000148e <__stop_program>:
    148e:	ff cf       	rjmp	.-2      	; 0x148e <__stop_program>
